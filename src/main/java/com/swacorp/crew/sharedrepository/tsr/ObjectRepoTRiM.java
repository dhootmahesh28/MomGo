
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package com.swacorp.crew.sharedrepository.tsr;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.web.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.03
public class ObjectRepoTRiM extends AppModelBase {		private loginToSouthwestWindow loginToSouthwestWindow;
	private useActiveDirectoryCheckBox useActiveDirectoryCheckBox;
	private tRiMTrainingResourceManagerSouthwestWindow tRiMTrainingResourceManagerSouthwestWindow;
	private progressWindow progressWindow;
	private oQSFlightOperationsPage oQSFlightOperationsPage;

	public ObjectRepoTRiM() throws GeneralLeanFtException 
	{
		setName("ObjectRepoTRiM");
			loginToSouthwestWindow = new loginToSouthwestWindow(this);
	tRiMTrainingResourceManagerSouthwestWindow = new tRiMTrainingResourceManagerSouthwestWindow(this);
	progressWindow = new progressWindow(this);
		rebuildDescriptions();
	}
	
	public ObjectRepoTRiM(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("ObjectRepoTRiM");
				loginToSouthwestWindow = new loginToSouthwestWindow(contextTestObject, this);
		useActiveDirectoryCheckBox = new useActiveDirectoryCheckBox(contextTestObject, this);
		tRiMTrainingResourceManagerSouthwestWindow = new tRiMTrainingResourceManagerSouthwestWindow(contextTestObject, this);
		progressWindow = new progressWindow(contextTestObject, this);
		oQSFlightOperationsPage = new oQSFlightOperationsPage(contextTestObject, this);
		rebuildDescriptions();
	}	

			public loginToSouthwestWindow loginToSouthwestWindow() { return loginToSouthwestWindow; }
		public useActiveDirectoryCheckBox useActiveDirectoryCheckBox() { return useActiveDirectoryCheckBox; }
		public tRiMTrainingResourceManagerSouthwestWindow tRiMTrainingResourceManagerSouthwestWindow() { return tRiMTrainingResourceManagerSouthwestWindow; }
		public progressWindow progressWindow() { return progressWindow; }
		public oQSFlightOperationsPage oQSFlightOperationsPage() { return oQSFlightOperationsPage; }

		public class loginToSouthwestWindow extends WinFormsWindowNodeBase
	{

		
			private txtUserIDEditField txtUserIDEditField;
	private txtPasswordEditField txtPasswordEditField;
	private btnLoginButton btnLoginButton;
						public loginToSouthwestWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					txtUserIDEditField = new txtUserIDEditField(this, applicationModel);
		txtPasswordEditField = new txtPasswordEditField(this, applicationModel);
		btnLoginButton = new btnLoginButton(this, applicationModel);
			
			setDisplayName("Login to Southwest");
		}
				public loginToSouthwestWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					txtUserIDEditField = new txtUserIDEditField(this, applicationModel);
		txtPasswordEditField = new txtPasswordEditField(this, applicationModel);
		btnLoginButton = new btnLoginButton(this, applicationModel);

			setDisplayName("Login to Southwest");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(false).ownedWindow(false).objectName("frmLogin").windowTitleRegExp("Login to Southwest").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public txtUserIDEditField txtUserIDEditField() { return txtUserIDEditField; }
		public txtPasswordEditField txtPasswordEditField() { return txtPasswordEditField; }
		public btnLoginButton btnLoginButton() { return btnLoginButton; }
		
			public class txtUserIDEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtUserIDEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtUserID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtUserID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtPasswordEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtPasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtPassword");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtPassword").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class btnLoginButton extends WinFormsButtonNodeBase
	{

		
								public btnLoginButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Login");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnOK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class useActiveDirectoryCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public useActiveDirectoryCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use Active Directory");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tRiMTrainingResourceManagerSouthwestWindow extends WinFormsWindowNodeBase
	{

		
			private mainMenuUiObject mainMenuUiObject;
	private findEmployeeWindow findEmployeeWindow;
	private employeeWindow employeeWindow;
	private requirementsWindow requirementsWindow;
	private addEmployeeRequirementWindow addEmployeeRequirementWindow;
	private swfObjectUiObject swfObjectUiObject;
	private autoPopulateWindow autoPopulateWindow;
	private requirementTemplateWindow requirementTemplateWindow;
	private tvTreeView tvTreeView;
	private finishedDialog finishedDialog;
	private instructorEmployeeScheduleWindow instructorEmployeeScheduleWindow;
	private EmployeeDetails EmployeeDetails;
	private cbSubFilterComboBox cbSubFilterComboBox;
	private wESTWAS4545Window wESTWAS4545Window;
						public tRiMTrainingResourceManagerSouthwestWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					mainMenuUiObject = new mainMenuUiObject(this, applicationModel);
		findEmployeeWindow = new findEmployeeWindow(this, applicationModel);
		employeeWindow = new employeeWindow(this, applicationModel);
		requirementsWindow = new requirementsWindow(this, applicationModel);
		addEmployeeRequirementWindow = new addEmployeeRequirementWindow(this, applicationModel);
		swfObjectUiObject = new swfObjectUiObject(this, applicationModel);
		autoPopulateWindow = new autoPopulateWindow(this, applicationModel);
		requirementTemplateWindow = new requirementTemplateWindow(this, applicationModel);
		tvTreeView = new tvTreeView(this, applicationModel);
		finishedDialog = new finishedDialog(this, applicationModel);
		instructorEmployeeScheduleWindow = new instructorEmployeeScheduleWindow(this, applicationModel);
		EmployeeDetails = new EmployeeDetails(this, applicationModel);
		cbSubFilterComboBox = new cbSubFilterComboBox(this, applicationModel);
		wESTWAS4545Window = new wESTWAS4545Window(this, applicationModel);
			
			setDisplayName("TRiM - Training Resource Manager:  Southwest");
		}
				public tRiMTrainingResourceManagerSouthwestWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					mainMenuUiObject = new mainMenuUiObject(this, applicationModel);
		findEmployeeWindow = new findEmployeeWindow(this, applicationModel);
		employeeWindow = new employeeWindow(this, applicationModel);
		requirementsWindow = new requirementsWindow(this, applicationModel);
		addEmployeeRequirementWindow = new addEmployeeRequirementWindow(this, applicationModel);
		swfObjectUiObject = new swfObjectUiObject(this, applicationModel);
		autoPopulateWindow = new autoPopulateWindow(this, applicationModel);
		requirementTemplateWindow = new requirementTemplateWindow(this, applicationModel);
		tvTreeView = new tvTreeView(this, applicationModel);
		finishedDialog = new finishedDialog(this, applicationModel);
		instructorEmployeeScheduleWindow = new instructorEmployeeScheduleWindow(this, applicationModel);
		EmployeeDetails = new EmployeeDetails(this, applicationModel);
		cbSubFilterComboBox = new cbSubFilterComboBox(this, applicationModel);
		wESTWAS4545Window = new wESTWAS4545Window(this, applicationModel);

			setDisplayName("TRiM - Training Resource Manager:  Southwest");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(false).ownedWindow(false).objectName("frmMain").windowTitleRegExp("TRiM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public mainMenuUiObject mainMenuUiObject() { return mainMenuUiObject; }
		public findEmployeeWindow findEmployeeWindow() { return findEmployeeWindow; }
		public employeeWindow employeeWindow() { return employeeWindow; }
		public requirementsWindow requirementsWindow() { return requirementsWindow; }
		public addEmployeeRequirementWindow addEmployeeRequirementWindow() { return addEmployeeRequirementWindow; }
		public swfObjectUiObject swfObjectUiObject() { return swfObjectUiObject; }
		public autoPopulateWindow autoPopulateWindow() { return autoPopulateWindow; }
		public requirementTemplateWindow requirementTemplateWindow() { return requirementTemplateWindow; }
		public tvTreeView tvTreeView() { return tvTreeView; }
		public finishedDialog finishedDialog() { return finishedDialog; }
		public instructorEmployeeScheduleWindow instructorEmployeeScheduleWindow() { return instructorEmployeeScheduleWindow; }
		public EmployeeDetails EmployeeDetails() { return EmployeeDetails; }
		public cbSubFilterComboBox cbSubFilterComboBox() { return cbSubFilterComboBox; }
		public wESTWAS4545Window wESTWAS4545Window() { return wESTWAS4545Window; }
		
			public class mainMenuUiObject extends WinFormsUiObjectNodeBase
	{

		
								public mainMenuUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Main Menu");
		}

		@Override
		protected com.hp.lft.sdk.winforms.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.UiObjectDescription.Builder().objectName("barMainMenu").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class findEmployeeWindow extends WinFormsWindowNodeBase
	{

		
			private txtSearchEmpNumberEditField txtSearchEmpNumberEditField;
	private showEmployeeDetailsButton showEmployeeDetailsButton;
	private lstSearchListBox1 lstSearchListBox1;
	private showEmployeeScheduleButton showEmployeeScheduleButton;
						public findEmployeeWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					txtSearchEmpNumberEditField = new txtSearchEmpNumberEditField(this, applicationModel);
		showEmployeeDetailsButton = new showEmployeeDetailsButton(this, applicationModel);
		lstSearchListBox1 = new lstSearchListBox1(this, applicationModel);
		showEmployeeScheduleButton = new showEmployeeScheduleButton(this, applicationModel);
			
			setDisplayName("Find Employee");
		}
				public findEmployeeWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					txtSearchEmpNumberEditField = new txtSearchEmpNumberEditField(this, applicationModel);
		showEmployeeDetailsButton = new showEmployeeDetailsButton(this, applicationModel);
		lstSearchListBox1 = new lstSearchListBox1(this, applicationModel);
		showEmployeeScheduleButton = new showEmployeeScheduleButton(this, applicationModel);

			setDisplayName("Find Employee");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmFindEmployee").windowTitleRegExp("Find Employee").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public txtSearchEmpNumberEditField txtSearchEmpNumberEditField() { return txtSearchEmpNumberEditField; }
		public showEmployeeDetailsButton showEmployeeDetailsButton() { return showEmployeeDetailsButton; }
		public lstSearchListBox1 lstSearchListBox1() { return lstSearchListBox1; }
		public showEmployeeScheduleButton showEmployeeScheduleButton() { return showEmployeeScheduleButton; }
		
			public class txtSearchEmpNumberEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtSearchEmpNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtSearchEmpNumber");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtSearchEmpNumber").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class showEmployeeDetailsButton extends WinFormsButtonNodeBase
	{

		
								public showEmployeeDetailsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show Employee Details");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnShowEmployeeDetails").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class lstSearchListBox1 extends WinFormsListBoxNodeBase
	{

		
								public lstSearchListBox1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("lstSearch");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ListBoxDescription.Builder().fullNamePath("lstSearch;GroupBox1;frmFindEmployee;;frmMain").objectName("lstSearch").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class showEmployeeScheduleButton extends WinFormsButtonNodeBase
	{

		
								public showEmployeeScheduleButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show Employee Schedule");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnShowEmployeeSchedule").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class employeeWindow extends WinFormsWindowNodeBase
	{

		
			private txtEmployeeNumberEditField txtEmployeeNumberEditField;
	private txtFirstNameEditField txtFirstNameEditField;
	private dtpDateOfBirthCalendar dtpDateOfBirthCalendar;
	private activeCheckBox activeCheckBox;
						public employeeWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					txtEmployeeNumberEditField = new txtEmployeeNumberEditField(this, applicationModel);
		txtFirstNameEditField = new txtFirstNameEditField(this, applicationModel);
		dtpDateOfBirthCalendar = new dtpDateOfBirthCalendar(this, applicationModel);
		activeCheckBox = new activeCheckBox(this, applicationModel);
			
			setDisplayName("Employee");
		}
				public employeeWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					txtEmployeeNumberEditField = new txtEmployeeNumberEditField(this, applicationModel);
		txtFirstNameEditField = new txtFirstNameEditField(this, applicationModel);
		dtpDateOfBirthCalendar = new dtpDateOfBirthCalendar(this, applicationModel);
		activeCheckBox = new activeCheckBox(this, applicationModel);

			setDisplayName("Employee");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmQualEmployee").windowTitleRegExp("Employee").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public txtEmployeeNumberEditField txtEmployeeNumberEditField() { return txtEmployeeNumberEditField; }
		public txtFirstNameEditField txtFirstNameEditField() { return txtFirstNameEditField; }
		public dtpDateOfBirthCalendar dtpDateOfBirthCalendar() { return dtpDateOfBirthCalendar; }
		public activeCheckBox activeCheckBox() { return activeCheckBox; }
		
			public class txtEmployeeNumberEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtEmployeeNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtEmployeeNumber");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtEmployeeNumber").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtFirstNameEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtFirstNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtFirstName");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtFirstName").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class dtpDateOfBirthCalendar extends WinFormsCalendarNodeBase
	{

		
								public dtpDateOfBirthCalendar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("dtpDateOfBirth");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CalendarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CalendarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CalendarDescription.Builder().objectName("dtpDateOfBirth").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class activeCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public activeCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Active");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkActive").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class requirementsWindow extends WinFormsWindowNodeBase
	{

		
			private txtRequirementNameEditField txtRequirementNameEditField;
	private cboReqTypeIDComboBox cboReqTypeIDComboBox;
	private cboDefaultCustomerComboBox cboDefaultCustomerComboBox;
	private disabledCheckBox disabledCheckBox;
	private favoriteCheckBox favoriteCheckBox;
	private txtCourseDefinitionDescriptionEditor txtCourseDefinitionDescriptionEditor;
	private cboEquipIDComboBox cboEquipIDComboBox;
	private cboAlsoSatisfiesReqIDComboBox cboAlsoSatisfiesReqIDComboBox;
	private txtRequirementNotesEditor txtRequirementNotesEditor;
	private suppressNotesCheckBox suppressNotesCheckBox;
	private thisRequirementTemplateIsACourseCheckBox thisRequirementTemplateIsACourseCheckBox;
	private showErrorWhenScheduledAfterDueDateCheckBox showErrorWhenScheduledAfterDueDateCheckBox;
	private allowSelfRegistrationCheckBox allowSelfRegistrationCheckBox;
	private txtMaxSpanDaysEditField txtMaxSpanDaysEditField;
	private txtDefaultBackgroundColorEditField txtDefaultBackgroundColorEditField;
	private displaySeriesLabelCheckBox displaySeriesLabelCheckBox;
	private txtNormalNumberOfStudentsEditField txtNormalNumberOfStudentsEditField;
	private doNotAutoScheduleCheckBox doNotAutoScheduleCheckBox;
	private autoSchedInExistingSlotsOnlyCheckBox autoSchedInExistingSlotsOnlyCheckBox;
	private doNotSplitAccrossMultipleResourcesCheckBox doNotSplitAccrossMultipleResourcesCheckBox;
	private pullAheadIfRequiredCheckBox pullAheadIfRequiredCheckBox;
	private txtAutoSchedPriorityEditField txtAutoSchedPriorityEditField;
	private txtAutoSchedPullFromNextMonthDaysEditField txtAutoSchedPullFromNextMonthDaysEditField;
	private txtRequirementSabreCodeEditor txtRequirementSabreCodeEditor;
	private txtPBSCodeEditField txtPBSCodeEditField;
	private saveButton saveButton;
						public requirementsWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					txtRequirementNameEditField = new txtRequirementNameEditField(this, applicationModel);
		cboReqTypeIDComboBox = new cboReqTypeIDComboBox(this, applicationModel);
		cboDefaultCustomerComboBox = new cboDefaultCustomerComboBox(this, applicationModel);
		disabledCheckBox = new disabledCheckBox(this, applicationModel);
		favoriteCheckBox = new favoriteCheckBox(this, applicationModel);
		txtCourseDefinitionDescriptionEditor = new txtCourseDefinitionDescriptionEditor(this, applicationModel);
		cboEquipIDComboBox = new cboEquipIDComboBox(this, applicationModel);
		cboAlsoSatisfiesReqIDComboBox = new cboAlsoSatisfiesReqIDComboBox(this, applicationModel);
		txtRequirementNotesEditor = new txtRequirementNotesEditor(this, applicationModel);
		suppressNotesCheckBox = new suppressNotesCheckBox(this, applicationModel);
		thisRequirementTemplateIsACourseCheckBox = new thisRequirementTemplateIsACourseCheckBox(this, applicationModel);
		showErrorWhenScheduledAfterDueDateCheckBox = new showErrorWhenScheduledAfterDueDateCheckBox(this, applicationModel);
		allowSelfRegistrationCheckBox = new allowSelfRegistrationCheckBox(this, applicationModel);
		txtMaxSpanDaysEditField = new txtMaxSpanDaysEditField(this, applicationModel);
		txtDefaultBackgroundColorEditField = new txtDefaultBackgroundColorEditField(this, applicationModel);
		displaySeriesLabelCheckBox = new displaySeriesLabelCheckBox(this, applicationModel);
		txtNormalNumberOfStudentsEditField = new txtNormalNumberOfStudentsEditField(this, applicationModel);
		doNotAutoScheduleCheckBox = new doNotAutoScheduleCheckBox(this, applicationModel);
		autoSchedInExistingSlotsOnlyCheckBox = new autoSchedInExistingSlotsOnlyCheckBox(this, applicationModel);
		doNotSplitAccrossMultipleResourcesCheckBox = new doNotSplitAccrossMultipleResourcesCheckBox(this, applicationModel);
		pullAheadIfRequiredCheckBox = new pullAheadIfRequiredCheckBox(this, applicationModel);
		txtAutoSchedPriorityEditField = new txtAutoSchedPriorityEditField(this, applicationModel);
		txtAutoSchedPullFromNextMonthDaysEditField = new txtAutoSchedPullFromNextMonthDaysEditField(this, applicationModel);
		txtRequirementSabreCodeEditor = new txtRequirementSabreCodeEditor(this, applicationModel);
		txtPBSCodeEditField = new txtPBSCodeEditField(this, applicationModel);
		saveButton = new saveButton(this, applicationModel);
			
			setDisplayName("Requirements");
		}
				public requirementsWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					txtRequirementNameEditField = new txtRequirementNameEditField(this, applicationModel);
		cboReqTypeIDComboBox = new cboReqTypeIDComboBox(this, applicationModel);
		cboDefaultCustomerComboBox = new cboDefaultCustomerComboBox(this, applicationModel);
		disabledCheckBox = new disabledCheckBox(this, applicationModel);
		favoriteCheckBox = new favoriteCheckBox(this, applicationModel);
		txtCourseDefinitionDescriptionEditor = new txtCourseDefinitionDescriptionEditor(this, applicationModel);
		cboEquipIDComboBox = new cboEquipIDComboBox(this, applicationModel);
		cboAlsoSatisfiesReqIDComboBox = new cboAlsoSatisfiesReqIDComboBox(this, applicationModel);
		txtRequirementNotesEditor = new txtRequirementNotesEditor(this, applicationModel);
		suppressNotesCheckBox = new suppressNotesCheckBox(this, applicationModel);
		thisRequirementTemplateIsACourseCheckBox = new thisRequirementTemplateIsACourseCheckBox(this, applicationModel);
		showErrorWhenScheduledAfterDueDateCheckBox = new showErrorWhenScheduledAfterDueDateCheckBox(this, applicationModel);
		allowSelfRegistrationCheckBox = new allowSelfRegistrationCheckBox(this, applicationModel);
		txtMaxSpanDaysEditField = new txtMaxSpanDaysEditField(this, applicationModel);
		txtDefaultBackgroundColorEditField = new txtDefaultBackgroundColorEditField(this, applicationModel);
		displaySeriesLabelCheckBox = new displaySeriesLabelCheckBox(this, applicationModel);
		txtNormalNumberOfStudentsEditField = new txtNormalNumberOfStudentsEditField(this, applicationModel);
		doNotAutoScheduleCheckBox = new doNotAutoScheduleCheckBox(this, applicationModel);
		autoSchedInExistingSlotsOnlyCheckBox = new autoSchedInExistingSlotsOnlyCheckBox(this, applicationModel);
		doNotSplitAccrossMultipleResourcesCheckBox = new doNotSplitAccrossMultipleResourcesCheckBox(this, applicationModel);
		pullAheadIfRequiredCheckBox = new pullAheadIfRequiredCheckBox(this, applicationModel);
		txtAutoSchedPriorityEditField = new txtAutoSchedPriorityEditField(this, applicationModel);
		txtAutoSchedPullFromNextMonthDaysEditField = new txtAutoSchedPullFromNextMonthDaysEditField(this, applicationModel);
		txtRequirementSabreCodeEditor = new txtRequirementSabreCodeEditor(this, applicationModel);
		txtPBSCodeEditField = new txtPBSCodeEditField(this, applicationModel);
		saveButton = new saveButton(this, applicationModel);

			setDisplayName("Requirements");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmRequirements").windowTitleRegExp("Requirements").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public txtRequirementNameEditField txtRequirementNameEditField() { return txtRequirementNameEditField; }
		public cboReqTypeIDComboBox cboReqTypeIDComboBox() { return cboReqTypeIDComboBox; }
		public cboDefaultCustomerComboBox cboDefaultCustomerComboBox() { return cboDefaultCustomerComboBox; }
		public disabledCheckBox disabledCheckBox() { return disabledCheckBox; }
		public favoriteCheckBox favoriteCheckBox() { return favoriteCheckBox; }
		public txtCourseDefinitionDescriptionEditor txtCourseDefinitionDescriptionEditor() { return txtCourseDefinitionDescriptionEditor; }
		public cboEquipIDComboBox cboEquipIDComboBox() { return cboEquipIDComboBox; }
		public cboAlsoSatisfiesReqIDComboBox cboAlsoSatisfiesReqIDComboBox() { return cboAlsoSatisfiesReqIDComboBox; }
		public txtRequirementNotesEditor txtRequirementNotesEditor() { return txtRequirementNotesEditor; }
		public suppressNotesCheckBox suppressNotesCheckBox() { return suppressNotesCheckBox; }
		public thisRequirementTemplateIsACourseCheckBox thisRequirementTemplateIsACourseCheckBox() { return thisRequirementTemplateIsACourseCheckBox; }
		public showErrorWhenScheduledAfterDueDateCheckBox showErrorWhenScheduledAfterDueDateCheckBox() { return showErrorWhenScheduledAfterDueDateCheckBox; }
		public allowSelfRegistrationCheckBox allowSelfRegistrationCheckBox() { return allowSelfRegistrationCheckBox; }
		public txtMaxSpanDaysEditField txtMaxSpanDaysEditField() { return txtMaxSpanDaysEditField; }
		public txtDefaultBackgroundColorEditField txtDefaultBackgroundColorEditField() { return txtDefaultBackgroundColorEditField; }
		public displaySeriesLabelCheckBox displaySeriesLabelCheckBox() { return displaySeriesLabelCheckBox; }
		public txtNormalNumberOfStudentsEditField txtNormalNumberOfStudentsEditField() { return txtNormalNumberOfStudentsEditField; }
		public doNotAutoScheduleCheckBox doNotAutoScheduleCheckBox() { return doNotAutoScheduleCheckBox; }
		public autoSchedInExistingSlotsOnlyCheckBox autoSchedInExistingSlotsOnlyCheckBox() { return autoSchedInExistingSlotsOnlyCheckBox; }
		public doNotSplitAccrossMultipleResourcesCheckBox doNotSplitAccrossMultipleResourcesCheckBox() { return doNotSplitAccrossMultipleResourcesCheckBox; }
		public pullAheadIfRequiredCheckBox pullAheadIfRequiredCheckBox() { return pullAheadIfRequiredCheckBox; }
		public txtAutoSchedPriorityEditField txtAutoSchedPriorityEditField() { return txtAutoSchedPriorityEditField; }
		public txtAutoSchedPullFromNextMonthDaysEditField txtAutoSchedPullFromNextMonthDaysEditField() { return txtAutoSchedPullFromNextMonthDaysEditField; }
		public txtRequirementSabreCodeEditor txtRequirementSabreCodeEditor() { return txtRequirementSabreCodeEditor; }
		public txtPBSCodeEditField txtPBSCodeEditField() { return txtPBSCodeEditField; }
		public saveButton saveButton() { return saveButton; }
		
			public class txtRequirementNameEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtRequirementNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtRequirementName");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtRequirementName").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboReqTypeIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboReqTypeIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboReqTypeID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboReqTypeID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboDefaultCustomerComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboDefaultCustomerComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboDefaultCustomer");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboDefaultCustomer").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class disabledCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public disabledCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Disabled");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkDisabled").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class favoriteCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public favoriteCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Favorite");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("cbxFavorite").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtCourseDefinitionDescriptionEditor extends WinFormsEditorNodeBase
	{

		
								public txtCourseDefinitionDescriptionEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtCourseDefinitionDescription");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditorDescription.Builder().objectName("txtCourseDefinitionDescription").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboEquipIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboEquipIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboEquipID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboEquipID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboAlsoSatisfiesReqIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboAlsoSatisfiesReqIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboAlsoSatisfiesReqID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboAlsoSatisfiesReqID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtRequirementNotesEditor extends WinFormsEditorNodeBase
	{

		
								public txtRequirementNotesEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtRequirementNotes");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditorDescription.Builder().objectName("txtRequirementNotes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class suppressNotesCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public suppressNotesCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Suppress Notes");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkSuppressRequirementNotes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class thisRequirementTemplateIsACourseCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public thisRequirementTemplateIsACourseCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("This Requirement Template is a Course");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkIsCourse").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class showErrorWhenScheduledAfterDueDateCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public showErrorWhenScheduledAfterDueDateCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show Error when scheduled after due date.");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkShowErrorWhenSchedAfterDueDate").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class allowSelfRegistrationCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public allowSelfRegistrationCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Allow Self Registration");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkAllowSelfRegistration").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtMaxSpanDaysEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtMaxSpanDaysEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtMaxSpanDays");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtMaxSpanDays").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtDefaultBackgroundColorEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtDefaultBackgroundColorEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtDefaultBackgroundColor");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtDefaultBackgroundColor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class displaySeriesLabelCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public displaySeriesLabelCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Display Series Label");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkSeriesLabel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtNormalNumberOfStudentsEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtNormalNumberOfStudentsEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtNormalNumberOfStudents");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtNormalNumberOfStudents").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class doNotAutoScheduleCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public doNotAutoScheduleCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Do Not Auto Schedule");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkDoNotAutoSched").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class autoSchedInExistingSlotsOnlyCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public autoSchedInExistingSlotsOnlyCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Auto Sched in Existing Slots Only");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkAutoSchedInExistingSlotsOnly").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class doNotSplitAccrossMultipleResourcesCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public doNotSplitAccrossMultipleResourcesCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Do not split accross multiple Resources");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkisForceKeepSameResource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pullAheadIfRequiredCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public pullAheadIfRequiredCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Pull ahead if required");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkAutoSchedPullFromNextMonthIfRequired").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtAutoSchedPriorityEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtAutoSchedPriorityEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtAutoSchedPriority");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtAutoSchedPriority").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtAutoSchedPullFromNextMonthDaysEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtAutoSchedPullFromNextMonthDaysEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtAutoSchedPullFromNextMonthDays");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtAutoSchedPullFromNextMonthDays").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtRequirementSabreCodeEditor extends WinFormsEditorNodeBase
	{

		
								public txtRequirementSabreCodeEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtRequirementSabreCode");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditorDescription.Builder().objectName("txtRequirementSabreCode").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtPBSCodeEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtPBSCodeEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtPBSCode");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtPBSCode").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class saveButton extends WinFormsButtonNodeBase
	{

		
								public saveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnSave").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class addEmployeeRequirementWindow extends WinFormsWindowNodeBase
	{

		
			private cboEmployeeIDComboBox cboEmployeeIDComboBox;
	private txtEmployeeNumbersEditor txtEmployeeNumbersEditor;
	private cboRequirementIDComboBox cboRequirementIDComboBox;
	private addRequirementToDuePilotListButton addRequirementToDuePilotListButton;
						public addEmployeeRequirementWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					cboEmployeeIDComboBox = new cboEmployeeIDComboBox(this, applicationModel);
		txtEmployeeNumbersEditor = new txtEmployeeNumbersEditor(this, applicationModel);
		cboRequirementIDComboBox = new cboRequirementIDComboBox(this, applicationModel);
		addRequirementToDuePilotListButton = new addRequirementToDuePilotListButton(this, applicationModel);
			
			setDisplayName("Add Employee Requirement");
		}
				public addEmployeeRequirementWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					cboEmployeeIDComboBox = new cboEmployeeIDComboBox(this, applicationModel);
		txtEmployeeNumbersEditor = new txtEmployeeNumbersEditor(this, applicationModel);
		cboRequirementIDComboBox = new cboRequirementIDComboBox(this, applicationModel);
		addRequirementToDuePilotListButton = new addRequirementToDuePilotListButton(this, applicationModel);

			setDisplayName("Add Employee Requirement");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmAddEmployeeRequirement").windowTitleRegExp("Add Employee Requirement").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public cboEmployeeIDComboBox cboEmployeeIDComboBox() { return cboEmployeeIDComboBox; }
		public txtEmployeeNumbersEditor txtEmployeeNumbersEditor() { return txtEmployeeNumbersEditor; }
		public cboRequirementIDComboBox cboRequirementIDComboBox() { return cboRequirementIDComboBox; }
		public addRequirementToDuePilotListButton addRequirementToDuePilotListButton() { return addRequirementToDuePilotListButton; }
		
			public class cboEmployeeIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboEmployeeIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboEmployeeID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboEmployeeID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtEmployeeNumbersEditor extends WinFormsEditorNodeBase
	{

		
								public txtEmployeeNumbersEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtEmployeeNumbers");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditorDescription.Builder().objectName("txtEmployeeNumbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboRequirementIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboRequirementIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboRequirementID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboRequirementID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class addRequirementToDuePilotListButton extends WinFormsButtonNodeBase
	{

		
								public addRequirementToDuePilotListButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add Requirement to Due Pilot List");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnAdd").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class swfObjectUiObject extends WinFormsUiObjectNodeBase
	{

		
								public swfObjectUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SwfObject");
		}

		@Override
		protected com.hp.lft.sdk.winforms.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.UiObjectDescription.Builder().fullType("System.Windows.Forms.MdiClient").objectName("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class autoPopulateWindow extends WinFormsWindowNodeBase
	{

		
			private templateDataGridTable templateDataGridTable;
	private tabPopulateTabControl tabPopulateTabControl;
	private startButton startButton;
	private cboEquipComboBox cboEquipComboBox;
						public autoPopulateWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					templateDataGridTable = new templateDataGridTable(this, applicationModel);
		tabPopulateTabControl = new tabPopulateTabControl(this, applicationModel);
		startButton = new startButton(this, applicationModel);
		cboEquipComboBox = new cboEquipComboBox(this, applicationModel);
			
			setDisplayName("Auto Populate");
		}
				public autoPopulateWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					templateDataGridTable = new templateDataGridTable(this, applicationModel);
		tabPopulateTabControl = new tabPopulateTabControl(this, applicationModel);
		startButton = new startButton(this, applicationModel);
		cboEquipComboBox = new cboEquipComboBox(this, applicationModel);

			setDisplayName("Auto Populate");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmAutoPopulate").windowTitleRegExp("Auto Populate").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public templateDataGridTable templateDataGridTable() { return templateDataGridTable; }
		public tabPopulateTabControl tabPopulateTabControl() { return tabPopulateTabControl; }
		public startButton startButton() { return startButton; }
		public cboEquipComboBox cboEquipComboBox() { return cboEquipComboBox; }
		
			public class templateDataGridTable extends WinFormsTableNodeBase
	{

		
			private swfEditEditField swfEditEditField;
	private swfComboBox swfComboBox;
						public templateDataGridTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					swfEditEditField = new swfEditEditField(this, applicationModel);
		swfComboBox = new swfComboBox(this, applicationModel);

			setDisplayName("templateDataGrid");
		}

		@Override
		protected com.hp.lft.sdk.winforms.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.TableDescription.Builder().objectName("templateDataGrid").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public swfEditEditField swfEditEditField() { return swfEditEditField; }
		public swfComboBox swfComboBox() { return swfComboBox; }
		
			public class swfEditEditField extends WinFormsEditFieldNodeBase
	{

		
								public swfEditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtCellEditor");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().fullType("System.Windows.Forms.DataGridViewTextBoxEditingControl").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class swfComboBox extends WinFormsComboBoxNodeBase
	{

		
								public swfComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboTemplate");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().fullType("System.Windows.Forms.DataGridViewComboBoxEditingControl").objectName("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class tabPopulateTabControl extends WinFormsTabControlNodeBase
	{

		
								public tabPopulateTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("tabPopulate");
		}

		@Override
		protected com.hp.lft.sdk.winforms.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.TabControlDescription.Builder().objectName("tabPopulate").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class startButton extends WinFormsButtonNodeBase
	{

		
								public startButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Start");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnStart").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboEquipComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboEquipComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboEquip");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboEquip").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class requirementTemplateWindow extends WinFormsWindowNodeBase
	{

		
			private makeDuplicateButton makeDuplicateButton;
						public requirementTemplateWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					makeDuplicateButton = new makeDuplicateButton(this, applicationModel);
			
			setDisplayName("Requirement Template");
		}
				public requirementTemplateWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					makeDuplicateButton = new makeDuplicateButton(this, applicationModel);

			setDisplayName("Requirement Template");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmRequirements").windowTitleRegExp(" Automation").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public makeDuplicateButton makeDuplicateButton() { return makeDuplicateButton; }
		
			public class makeDuplicateButton extends WinFormsButtonNodeBase
	{

		
								public makeDuplicateButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Make Duplicate");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnMakeDuplicate").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class tvTreeView extends WinFormsTreeViewNodeBase
	{

		
								public tvTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("tvSchedPlanner");
		}

		@Override
		protected com.hp.lft.sdk.winforms.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.TreeViewDescription.Builder().objectName("tv").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishedDialog extends StdDialogNodeBase
	{

		
			private oKButton oKButton;
	private requirementSCreatedNoErrorsStatic requirementSCreatedNoErrorsStatic;
						public finishedDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		requirementSCreatedNoErrorsStatic = new requirementSCreatedNoErrorsStatic(this, applicationModel);
			
			setDisplayName("Finished");
		}
				public finishedDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		requirementSCreatedNoErrorsStatic = new requirementSCreatedNoErrorsStatic(this, applicationModel);

			setDisplayName("Finished");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("Finished").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public requirementSCreatedNoErrorsStatic requirementSCreatedNoErrorsStatic() { return requirementSCreatedNoErrorsStatic; }
		
			public class oKButton extends StdButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().nativeClass("Button").text("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class requirementSCreatedNoErrorsStatic extends StdStaticNodeBase
	{

		
								public requirementSCreatedNoErrorsStatic(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RequirementCreatedMsg");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.StaticDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.StaticDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.StaticDescription.Builder().nativeClass("Static").windowId(65535).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class instructorEmployeeScheduleWindow extends WinFormsWindowNodeBase
	{

		
			private dgTable dgTable;
						public instructorEmployeeScheduleWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					dgTable = new dgTable(this, applicationModel);
			
			setDisplayName("Instructor/Employee Schedule");
		}
				public instructorEmployeeScheduleWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					dgTable = new dgTable(this, applicationModel);

			setDisplayName("Instructor/Employee Schedule");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmResourceSched").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public dgTable dgTable() { return dgTable; }
		
			public class dgTable extends WinFormsTableNodeBase
	{

		
								public dgTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("dg");
		}

		@Override
		protected com.hp.lft.sdk.winforms.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.TableDescription.Builder().objectName("dg").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class EmployeeDetails extends WinFormsWindowNodeBase
	{

		
			private cboPrimaryEquipIDComboBox cboPrimaryEquipIDComboBox;
	private cboPrimaryCrewStatusIDComboBox cboPrimaryCrewStatusIDComboBox;
	private txtEmployeeNumberEditField txtEmployeeNumberEditField;
	private txtFNameEditField txtFNameEditField;
	private saveButton saveButton;
	private saveAndCloseButton saveAndCloseButton;
	private txtLNameEditField txtLNameEditField;
	private inactiveCheckBox inactiveCheckBox;
						public EmployeeDetails(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					cboPrimaryEquipIDComboBox = new cboPrimaryEquipIDComboBox(this, applicationModel);
		cboPrimaryCrewStatusIDComboBox = new cboPrimaryCrewStatusIDComboBox(this, applicationModel);
		txtEmployeeNumberEditField = new txtEmployeeNumberEditField(this, applicationModel);
		txtFNameEditField = new txtFNameEditField(this, applicationModel);
		saveButton = new saveButton(this, applicationModel);
		saveAndCloseButton = new saveAndCloseButton(this, applicationModel);
		txtLNameEditField = new txtLNameEditField(this, applicationModel);
		inactiveCheckBox = new inactiveCheckBox(this, applicationModel);
			
			setDisplayName("EmployeeDetailsWindow");
		}
				public EmployeeDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					cboPrimaryEquipIDComboBox = new cboPrimaryEquipIDComboBox(this, applicationModel);
		cboPrimaryCrewStatusIDComboBox = new cboPrimaryCrewStatusIDComboBox(this, applicationModel);
		txtEmployeeNumberEditField = new txtEmployeeNumberEditField(this, applicationModel);
		txtFNameEditField = new txtFNameEditField(this, applicationModel);
		saveButton = new saveButton(this, applicationModel);
		saveAndCloseButton = new saveAndCloseButton(this, applicationModel);
		txtLNameEditField = new txtLNameEditField(this, applicationModel);
		inactiveCheckBox = new inactiveCheckBox(this, applicationModel);

			setDisplayName("EmployeeDetailsWindow");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmEmployees").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public cboPrimaryEquipIDComboBox cboPrimaryEquipIDComboBox() { return cboPrimaryEquipIDComboBox; }
		public cboPrimaryCrewStatusIDComboBox cboPrimaryCrewStatusIDComboBox() { return cboPrimaryCrewStatusIDComboBox; }
		public txtEmployeeNumberEditField txtEmployeeNumberEditField() { return txtEmployeeNumberEditField; }
		public txtFNameEditField txtFNameEditField() { return txtFNameEditField; }
		public saveButton saveButton() { return saveButton; }
		public saveAndCloseButton saveAndCloseButton() { return saveAndCloseButton; }
		public txtLNameEditField txtLNameEditField() { return txtLNameEditField; }
		public inactiveCheckBox inactiveCheckBox() { return inactiveCheckBox; }
		
			public class cboPrimaryEquipIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboPrimaryEquipIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboPrimaryEquipID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboPrimaryEquipID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cboPrimaryCrewStatusIDComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cboPrimaryCrewStatusIDComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cboPrimaryCrewStatusID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cboPrimaryCrewStatusID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtEmployeeNumberEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtEmployeeNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtEmployeeNumber");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtEmployeeNumber").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtFNameEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtFNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtFName");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtFName").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class saveButton extends WinFormsButtonNodeBase
	{

		
								public saveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnSave").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class saveAndCloseButton extends WinFormsButtonNodeBase
	{

		
								public saveAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save and Close");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnSaveClose").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtLNameEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtLNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtLName");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtLName").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class inactiveCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public inactiveCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Inactive");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription.Builder().objectName("chkHide").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cbSubFilterComboBox extends WinFormsComboBoxNodeBase
	{

		
								public cbSubFilterComboBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cmbSchedulePlanner");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ComboBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ComboBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ComboBoxDescription.Builder().objectName("cbSubFilter").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class wESTWAS4545Window extends WinFormsWindowNodeBase
	{

		
								public wESTWAS4545Window(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

						
			setDisplayName("WEST, WAS (4545)");
		}
				public wESTWAS4545Window(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WEST, WAS (4545)");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(true).ownedWindow(false).objectName("frmEmployees").windowTitleRegExp("WEST, WAS (4545)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class progressWindow extends WinFormsWindowNodeBase
	{

		
			private populateCompleteLabel populateCompleteLabel;
						public progressWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					populateCompleteLabel = new populateCompleteLabel(this, applicationModel);
			
			setDisplayName("Progress");
		}
				public progressWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					populateCompleteLabel = new populateCompleteLabel(this, applicationModel);

			setDisplayName("Progress");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(false).ownedWindow(false).objectName("frmPopulateProgressChecker").windowTitleRegExp("Progress").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public populateCompleteLabel populateCompleteLabel() { return populateCompleteLabel; }
		
			public class populateCompleteLabel extends WinFormsLabelNodeBase
	{

		
								public populateCompleteLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Populate Complete.");
		}

		@Override
		protected com.hp.lft.sdk.winforms.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.LabelDescription.Builder().objectName("infoLabel").text("Populate Complete.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class oQSFlightOperationsPage extends WebPageNodeBase
	{

		
			private compAreaFrame compAreaFrame;
						public oQSFlightOperationsPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					compAreaFrame = new compAreaFrame(this, applicationModel);

			setDisplayName("OQS - Flight Operations");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public compAreaFrame compAreaFrame() { return compAreaFrame; }
		
			public class compAreaFrame extends WebFrameNodeBase
	{

		
			private webEditEditField webEditEditField;
	private oKButton oKButton;
	private webCheckBox webCheckBox;
						public compAreaFrame(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					webEditEditField = new webEditEditField(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		webCheckBox = new webCheckBox(this, applicationModel);

			setDisplayName("compArea");
		}

		@Override
		protected com.hp.lft.sdk.web.FrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.FrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.FrameDescription.Builder().name("compArea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public webEditEditField webEditEditField() { return webEditEditField; }
		public oKButton oKButton() { return oKButton; }
		public webCheckBox webCheckBox() { return webCheckBox; }
		
			public class webEditEditField extends WebEditFieldNodeBase
	{

		
								public webEditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebEdit");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("INPUT").type("text").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends WebButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("OK").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class webCheckBox extends WebCheckBoxNodeBase
	{

		
								public webCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().accessibilityName("").name("").role("").tagName("INPUT").type("checkbox").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}


			
	public abstract class WebPageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public WebPageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WebFrameNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Frame, com.hp.lft.sdk.web.FrameDescription> implements com.hp.lft.sdk.web.Frame
	{		
		public WebFrameNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WebEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.EditField, com.hp.lft.sdk.web.EditFieldDescription> implements com.hp.lft.sdk.web.EditField
	{		
		public WebEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMaxCharsInLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxCharsInLine();
		}

		@Override 
		public int getMaxLength() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxLength();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getPattern() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPattern();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public int getRowsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRowsCount();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isRequired() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRequired();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setValue(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setValue(arg0);
		}

		@Override 
		public void submit() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().submit();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WebButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Button, com.hp.lft.sdk.web.ButtonDescription> implements com.hp.lft.sdk.web.Button
	{		
		public WebButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getButtonType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtonType();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WebCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.CheckBox, com.hp.lft.sdk.web.CheckBoxDescription> implements com.hp.lft.sdk.web.CheckBox
	{		
		public WebCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
		
	public abstract class StdDialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Dialog, com.hp.lft.sdk.stdwin.DialogDescription> implements com.hp.lft.sdk.stdwin.Dialog
	{
		public StdDialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdDialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class StdButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Button, com.hp.lft.sdk.stdwin.ButtonDescription> implements com.hp.lft.sdk.stdwin.Button
	{		
		public StdButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class StdStaticNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Static, com.hp.lft.sdk.stdwin.StaticDescription> implements com.hp.lft.sdk.stdwin.Static
	{		
		public StdStaticNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
		
	public abstract class WinFormsWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.winforms.Window, com.hp.lft.sdk.winforms.WindowDescription> implements com.hp.lft.sdk.winforms.Window
	{
		public WinFormsWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WinFormsWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.EditField, com.hp.lft.sdk.winforms.EditFieldDescription> implements com.hp.lft.sdk.winforms.EditField
	{		
		public WinFormsEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.Button, com.hp.lft.sdk.winforms.ButtonDescription> implements com.hp.lft.sdk.winforms.Button
	{		
		public WinFormsButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.CheckBox, com.hp.lft.sdk.winforms.CheckBoxDescription> implements com.hp.lft.sdk.winforms.CheckBox
	{		
		public WinFormsCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isThreeState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isThreeState();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setState(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setState(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.UiObject, com.hp.lft.sdk.winforms.UiObjectDescription> implements com.hp.lft.sdk.winforms.UiObject
	{		
		public WinFormsUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1, arg2);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsListBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.ListBox, com.hp.lft.sdk.winforms.ListBoxDescription> implements com.hp.lft.sdk.winforms.ListBox
	{		
		public WinFormsListBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(com.hp.lft.sdk.winforms.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void activateItem(com.hp.lft.sdk.winforms.ListItem arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void activateItem(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.winforms.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public com.hp.lft.sdk.winforms.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.winforms.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.winforms.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.winforms.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsCalendarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.Calendar, com.hp.lft.sdk.winforms.CalendarDescription> implements com.hp.lft.sdk.winforms.Calendar
	{		
		public WinFormsCalendarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.util.Date getDate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDate();
		}

		@Override 
		public com.hp.lft.sdk.DateRange getDateRange() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDateRange();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.sql.Time getTime() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTime();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isRangeSelected() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRangeSelected();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDate(java.util.Date arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setDate(arg0);
		}

		@Override 
		public void setDateRange(com.hp.lft.sdk.DateRange arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setDateRange(arg0);
		}

		@Override 
		public void setDateRange(java.util.Date arg0, java.util.Date arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setDateRange(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setTime(java.sql.Time arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setTime(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsComboBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.ComboBox, com.hp.lft.sdk.winforms.ComboBoxDescription> implements com.hp.lft.sdk.winforms.ComboBox
	{		
		public WinFormsComboBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.util.List<java.lang.String> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getSelectedItem() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItem();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsEditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.Editor, com.hp.lft.sdk.winforms.EditorDescription> implements com.hp.lft.sdk.winforms.Editor
	{		
		public WinFormsEditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public int getCursorColumn() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCursorColumn();
		}

		@Override 
		public int getCursorLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCursorLine();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getSelectedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedText();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsTableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.Table, com.hp.lft.sdk.winforms.TableDescription> implements com.hp.lft.sdk.winforms.Table
	{		
		public WinFormsTableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateRow(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public com.hp.lft.sdk.winforms.CustomGridsProvider getCustomGrid() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCustomGrid();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public com.hp.lft.sdk.winforms.GridType getGridType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getGridType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void makeCellVisible(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().makeCellVisible(arg0, arg1);
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRow(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsTabControlNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.TabControl, com.hp.lft.sdk.winforms.TabControlDescription> implements com.hp.lft.sdk.winforms.TabControl
	{		
		public WinFormsTabControlNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getSelectedTab() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedTab();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.util.List<java.lang.String> getTabs() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTabs();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void select(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsTreeViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.TreeView, com.hp.lft.sdk.winforms.TreeViewDescription> implements com.hp.lft.sdk.winforms.TreeView
	{		
		public WinFormsTreeViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateNode(com.hp.lft.sdk.winforms.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(com.hp.lft.sdk.winforms.TreeViewNode arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0, arg1);
		}

		@Override 
		public void activateNode(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0, arg1);
		}

		@Override 
		public void activateNode(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0, arg1);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.winforms.TreeViewNode> getCheckedVisibleNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCheckedVisibleNodes();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public com.hp.lft.sdk.winforms.TreeViewNode getNode(java.lang.String arg0)  
		{
			return getConcrete().getNode(arg0);
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.winforms.TreeViewNode> getSelectedNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedNodes();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.winforms.TreeViewNode> getVisibleNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleNodes();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.winforms.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.winforms.TreeViewNode arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void select(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void select(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WinFormsLabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.Label, com.hp.lft.sdk.winforms.LabelDescription> implements com.hp.lft.sdk.winforms.Label
	{		
		public WinFormsLabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getErrorText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getErrorText();
		}

		@Override 
		public java.lang.String getFullNamePath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullNamePath();
		}

		@Override 
		public java.lang.String getFullType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFullType();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
}
