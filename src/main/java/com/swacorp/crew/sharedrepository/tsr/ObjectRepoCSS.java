
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package com.swacorp.crew.sharedrepository.tsr;

import com.hp.lft.sdk.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.03
public class ObjectRepoCSS extends AppModelBase {		private loginDialog loginDialog;
	private pLTCSSClient36SatSuperUserDefaultDesktopWindow pLTCSSClient36SatSuperUserDefaultDesktopWindow;
	private cMButton cMButton;
	private CssMainWindow CssMainWindow;
	private cmbEmployeeListDropdown cmbEmployeeListDropdown;

	public ObjectRepoCSS() throws GeneralLeanFtException 
	{
		setName("ObjectRepoCSS");
			loginDialog = new loginDialog(this);
	pLTCSSClient36SatSuperUserDefaultDesktopWindow = new pLTCSSClient36SatSuperUserDefaultDesktopWindow(this);
	CssMainWindow = new CssMainWindow(this);
		rebuildDescriptions();
	}
	
	public ObjectRepoCSS(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("ObjectRepoCSS");
				loginDialog = new loginDialog(contextTestObject, this);
		pLTCSSClient36SatSuperUserDefaultDesktopWindow = new pLTCSSClient36SatSuperUserDefaultDesktopWindow(contextTestObject, this);
		cMButton = new cMButton(contextTestObject, this);
		CssMainWindow = new CssMainWindow(contextTestObject, this);
		cmbEmployeeListDropdown = new cmbEmployeeListDropdown(contextTestObject, this);
		rebuildDescriptions();
	}	

			public loginDialog loginDialog() { return loginDialog; }
		public pLTCSSClient36SatSuperUserDefaultDesktopWindow pLTCSSClient36SatSuperUserDefaultDesktopWindow() { return pLTCSSClient36SatSuperUserDefaultDesktopWindow; }
		public cMButton cMButton() { return cMButton; }
		public CssMainWindow CssMainWindow() { return CssMainWindow; }
		public cmbEmployeeListDropdown cmbEmployeeListDropdown() { return cmbEmployeeListDropdown; }

		public class loginDialog extends DialogNodeBase
	{

		
			private userNameEditor userNameEditor;
	private passwordEditor passwordEditor;
	private loginButton loginButton;
						public loginDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					userNameEditor = new userNameEditor(this, applicationModel);
		passwordEditor = new passwordEditor(this, applicationModel);
		loginButton = new loginButton(this, applicationModel);
			
			setDisplayName("cssLogin");
		}
				public loginDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					userNameEditor = new userNameEditor(this, applicationModel);
		passwordEditor = new passwordEditor(this, applicationModel);
		loginButton = new loginButton(this, applicationModel);

			setDisplayName("cssLogin");
		}

		@Override
		protected com.hp.lft.sdk.java.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.DialogDescription.Builder().title("Login").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public userNameEditor userNameEditor() { return userNameEditor; }
		public passwordEditor passwordEditor() { return passwordEditor; }
		public loginButton loginButton() { return loginButton; }
		
			public class userNameEditor extends EditorNodeBase
	{

		
								public userNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("User Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class passwordEditor extends EditorNodeBase
	{

		
								public passwordEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Password:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Password:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class loginButton extends ButtonNodeBase
	{

		
								public loginButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Login");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Login").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class pLTCSSClient36SatSuperUserDefaultDesktopWindow extends WindowNodeBase
	{

		
			private openCrewMemberScheduleDialog openCrewMemberScheduleDialog;
	private cSSToolBar cSSToolBar;
	private crewMemberScheduleButton crewMemberScheduleButton;
	private transactionReportDialog transactionReportDialog;
	private wnDesktopMDI1UiObject wnDesktopMDI1UiObject;
						public pLTCSSClient36SatSuperUserDefaultDesktopWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					openCrewMemberScheduleDialog = new openCrewMemberScheduleDialog(this, applicationModel);
		cSSToolBar = new cSSToolBar(this, applicationModel);
		crewMemberScheduleButton = new crewMemberScheduleButton(this, applicationModel);
		transactionReportDialog = new transactionReportDialog(this, applicationModel);
		wnDesktopMDI1UiObject = new wnDesktopMDI1UiObject(this, applicationModel);
			
			setDisplayName("1_CSS Client Home Page");
		}
				public pLTCSSClient36SatSuperUserDefaultDesktopWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					openCrewMemberScheduleDialog = new openCrewMemberScheduleDialog(this, applicationModel);
		cSSToolBar = new cSSToolBar(this, applicationModel);
		crewMemberScheduleButton = new crewMemberScheduleButton(this, applicationModel);
		transactionReportDialog = new transactionReportDialog(this, applicationModel);
		wnDesktopMDI1UiObject = new wnDesktopMDI1UiObject(this, applicationModel);

			setDisplayName("1_CSS Client Home Page");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("(PLT)CSS Client 36 sat - Super User - Default Desktop").label("(PLT)CSS Client 36 sat - Super User - Default Desktop").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public openCrewMemberScheduleDialog openCrewMemberScheduleDialog() { return openCrewMemberScheduleDialog; }
		public cSSToolBar cSSToolBar() { return cSSToolBar; }
		public crewMemberScheduleButton crewMemberScheduleButton() { return crewMemberScheduleButton; }
		public transactionReportDialog transactionReportDialog() { return transactionReportDialog; }
		public wnDesktopMDI1UiObject wnDesktopMDI1UiObject() { return wnDesktopMDI1UiObject; }
		
			public class openCrewMemberScheduleDialog extends DialogNodeBase
	{

		
			private continueButton continueButton;
	private employeeNameOrIDEditor employeeNameOrIDEditor;
						public openCrewMemberScheduleDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					continueButton = new continueButton(this, applicationModel);
		employeeNameOrIDEditor = new employeeNameOrIDEditor(this, applicationModel);
			
			setDisplayName("Open Crew Member Schedule");
		}
				public openCrewMemberScheduleDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					continueButton = new continueButton(this, applicationModel);
		employeeNameOrIDEditor = new employeeNameOrIDEditor(this, applicationModel);

			setDisplayName("Open Crew Member Schedule");
		}

		@Override
		protected com.hp.lft.sdk.java.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.DialogDescription.Builder().title("Open Crew Member Schedule").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public continueButton continueButton() { return continueButton; }
		public employeeNameOrIDEditor employeeNameOrIDEditor() { return employeeNameOrIDEditor; }
		
			public class continueButton extends ButtonNodeBase
	{

		
								public continueButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Continue");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Continue").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class employeeNameOrIDEditor extends EditorNodeBase
	{

		
								public employeeNameOrIDEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Employee Name or ID");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Employee Name or ID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cSSToolBar extends ToolBarNodeBase
	{

		
								public cSSToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSSToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class crewMemberScheduleButton extends ButtonNodeBase
	{

		
								public crewMemberScheduleButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Crew_Member_Schedule");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Crew_Member_Schedule").label("Crew_Member_Schedule").objectName("Crew Board").path("CrewBoardButton;CSSToolBar;JPanel;JLayeredPane;JRootPane;WnApplicationContainer;").tagName("Crew_Member_Schedule").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class transactionReportDialog extends DialogNodeBase
	{

		
			private crewMemberCheckBox crewMemberCheckBox;
	private reasonCheckBox reasonCheckBox;
						public transactionReportDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					crewMemberCheckBox = new crewMemberCheckBox(this, applicationModel);
		reasonCheckBox = new reasonCheckBox(this, applicationModel);
			
			setDisplayName("Transaction Report Dialog");
		}
				public transactionReportDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					crewMemberCheckBox = new crewMemberCheckBox(this, applicationModel);
		reasonCheckBox = new reasonCheckBox(this, applicationModel);

			setDisplayName("Transaction Report Dialog");
		}

		@Override
		protected com.hp.lft.sdk.java.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.DialogDescription.Builder().title("Transaction Report Dialog").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public crewMemberCheckBox crewMemberCheckBox() { return crewMemberCheckBox; }
		public reasonCheckBox reasonCheckBox() { return reasonCheckBox; }
		
			public class crewMemberCheckBox extends CheckBoxNodeBase
	{

		
								public crewMemberCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Crew Member:");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Crew Member:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class reasonCheckBox extends CheckBoxNodeBase
	{

		
								public reasonCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Reason:");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Reason:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class wnDesktopMDI1UiObject extends UiObjectNodeBase
	{

		
								public wnDesktopMDI1UiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WnDesktopMDI$1");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("com.swacorp.aaf.ui.uac.container.internal.WnDesktopMDI$1").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cMButton extends ButtonNodeBase
	{

		
								public cMButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CMButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Crew Board Window").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CssMainWindow extends WindowNodeBase
	{

		
			private crewMemberScheduleButton crewMemberScheduleButton;
	private cSSToolBar cSSToolBar;
	private crewsMenu crewsMenu;
	private crewMemberSchedule crewMemberSchedule;
	private openCrewMemberScheduleDialog openCrewMemberScheduleDialog;
	private frameCMBoard frameCMBoard;
	private crewMemberSchedule90870CAHOONCLAYINTLInternalFrame crewMemberSchedule90870CAHOONCLAYINTLInternalFrame;
	private crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1 crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1;
	private frameTrimDetails frameTrimDetails;
	private transactionReportInternalFrame transactionReportInternalFrame;
	private reportsMenu reportsMenu;
	private transactionReportDialog transactionReportDialog;
	private openTimeMenu openTimeMenu;
	private openTimeInternalFrame openTimeInternalFrame;
	private crewBoardPieceUiObject crewBoardPieceUiObject;
						public CssMainWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					crewMemberScheduleButton = new crewMemberScheduleButton(this, applicationModel);
		cSSToolBar = new cSSToolBar(this, applicationModel);
		crewsMenu = new crewsMenu(this, applicationModel);
		crewMemberSchedule = new crewMemberSchedule(this, applicationModel);
		openCrewMemberScheduleDialog = new openCrewMemberScheduleDialog(this, applicationModel);
		frameCMBoard = new frameCMBoard(this, applicationModel);
		crewMemberSchedule90870CAHOONCLAYINTLInternalFrame = new crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(this, applicationModel);
		crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1 = new crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1(this, applicationModel);
		frameTrimDetails = new frameTrimDetails(this, applicationModel);
		transactionReportInternalFrame = new transactionReportInternalFrame(this, applicationModel);
		reportsMenu = new reportsMenu(this, applicationModel);
		transactionReportDialog = new transactionReportDialog(this, applicationModel);
		openTimeMenu = new openTimeMenu(this, applicationModel);
		openTimeInternalFrame = new openTimeInternalFrame(this, applicationModel);
		crewBoardPieceUiObject = new crewBoardPieceUiObject(this, applicationModel);
			
			setDisplayName("CssMainWindow");
		}
				public CssMainWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					crewMemberScheduleButton = new crewMemberScheduleButton(this, applicationModel);
		cSSToolBar = new cSSToolBar(this, applicationModel);
		crewsMenu = new crewsMenu(this, applicationModel);
		crewMemberSchedule = new crewMemberSchedule(this, applicationModel);
		openCrewMemberScheduleDialog = new openCrewMemberScheduleDialog(this, applicationModel);
		frameCMBoard = new frameCMBoard(this, applicationModel);
		crewMemberSchedule90870CAHOONCLAYINTLInternalFrame = new crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(this, applicationModel);
		crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1 = new crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1(this, applicationModel);
		frameTrimDetails = new frameTrimDetails(this, applicationModel);
		transactionReportInternalFrame = new transactionReportInternalFrame(this, applicationModel);
		reportsMenu = new reportsMenu(this, applicationModel);
		transactionReportDialog = new transactionReportDialog(this, applicationModel);
		openTimeMenu = new openTimeMenu(this, applicationModel);
		openTimeInternalFrame = new openTimeInternalFrame(this, applicationModel);
		crewBoardPieceUiObject = new crewBoardPieceUiObject(this, applicationModel);

			setDisplayName("CssMainWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().path("WnApplicationContainer;").nativeClass("com.swacorp.aaf.ui.uac.container.WnApplicationContainer").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public crewMemberScheduleButton crewMemberScheduleButton() { return crewMemberScheduleButton; }
		public cSSToolBar cSSToolBar() { return cSSToolBar; }
		public crewsMenu crewsMenu() { return crewsMenu; }
		public crewMemberSchedule crewMemberSchedule() { return crewMemberSchedule; }
		public openCrewMemberScheduleDialog openCrewMemberScheduleDialog() { return openCrewMemberScheduleDialog; }
		public frameCMBoard frameCMBoard() { return frameCMBoard; }
		public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame crewMemberSchedule90870CAHOONCLAYINTLInternalFrame() { return crewMemberSchedule90870CAHOONCLAYINTLInternalFrame; }
		public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1 crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1() { return crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1; }
		public frameTrimDetails frameTrimDetails() { return frameTrimDetails; }
		public transactionReportInternalFrame transactionReportInternalFrame() { return transactionReportInternalFrame; }
		public reportsMenu reportsMenu() { return reportsMenu; }
		public transactionReportDialog transactionReportDialog() { return transactionReportDialog; }
		public openTimeMenu openTimeMenu() { return openTimeMenu; }
		public openTimeInternalFrame openTimeInternalFrame() { return openTimeInternalFrame; }
		public crewBoardPieceUiObject crewBoardPieceUiObject() { return crewBoardPieceUiObject; }
		
			public class crewMemberScheduleButton extends ButtonNodeBase
	{

		
								public crewMemberScheduleButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Crew_Member_Schedule");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Crew_Member_Schedule").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cSSToolBar extends ToolBarNodeBase
	{

		
								public cSSToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSSToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class crewsMenu extends MenuNodeBase
	{

		
								public crewsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Crews");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Crews").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class crewMemberSchedule extends MenuNodeBase
	{

		
								public crewMemberSchedule(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Crew Member Schedule...");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Crew Member Schedule...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class openCrewMemberScheduleDialog extends DialogNodeBase
	{

		
			private continueButton continueButton;
	private cmbEmployeeNameOrIDEditor cmbEmployeeNameOrIDEditor;
	private btnDropDownEmployeeSelect btnDropDownEmployeeSelect;
						public openCrewMemberScheduleDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					continueButton = new continueButton(this, applicationModel);
		cmbEmployeeNameOrIDEditor = new cmbEmployeeNameOrIDEditor(this, applicationModel);
		btnDropDownEmployeeSelect = new btnDropDownEmployeeSelect(this, applicationModel);
			
			setDisplayName("Open Crew Member Schedule");
		}
				public openCrewMemberScheduleDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					continueButton = new continueButton(this, applicationModel);
		cmbEmployeeNameOrIDEditor = new cmbEmployeeNameOrIDEditor(this, applicationModel);
		btnDropDownEmployeeSelect = new btnDropDownEmployeeSelect(this, applicationModel);

			setDisplayName("Open Crew Member Schedule");
		}

		@Override
		protected com.hp.lft.sdk.java.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.DialogDescription.Builder().title("Open Crew Member Schedule").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public continueButton continueButton() { return continueButton; }
		public cmbEmployeeNameOrIDEditor cmbEmployeeNameOrIDEditor() { return cmbEmployeeNameOrIDEditor; }
		public btnDropDownEmployeeSelect btnDropDownEmployeeSelect() { return btnDropDownEmployeeSelect; }
		
			public class continueButton extends ButtonNodeBase
	{

		
								public continueButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Continue");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Continue").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cmbEmployeeNameOrIDEditor extends EditorNodeBase
	{

		
								public cmbEmployeeNameOrIDEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Employee Name or ID");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Employee Name or ID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class btnDropDownEmployeeSelect extends ButtonNodeBase
	{

		
								public btnDropDownEmployeeSelect(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Base");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Base").label("").nativeClass("com.incors.plaf.alloy.dw").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class frameCMBoard extends InternalFrameNodeBase
	{

		
			private xUiObject xUiObject;
	private modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox;
	private tripStartDateEditor tripStartDateEditor;
	private tripEndDateEditor tripEndDateEditor;
	private tripStartTimeEditor tripStartTimeEditor;
	private tripEndTimeEditor tripEndTimeEditor;
	private creditEditor creditEditor;
	private runTransactionReportButton runTransactionReportButton;
	private pDFIconButton pDFIconButton;
	private cMBoardripRghtClkMenu cMBoardripRghtClkMenu;
						public frameCMBoard(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					xUiObject = new xUiObject(this, applicationModel);
		modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);
		tripStartDateEditor = new tripStartDateEditor(this, applicationModel);
		tripEndDateEditor = new tripEndDateEditor(this, applicationModel);
		tripStartTimeEditor = new tripStartTimeEditor(this, applicationModel);
		tripEndTimeEditor = new tripEndTimeEditor(this, applicationModel);
		creditEditor = new creditEditor(this, applicationModel);
		runTransactionReportButton = new runTransactionReportButton(this, applicationModel);
		pDFIconButton = new pDFIconButton(this, applicationModel);
		cMBoardripRghtClkMenu = new cMBoardripRghtClkMenu(this, applicationModel);
			
			setDisplayName("CMBoard");
		}
				public frameCMBoard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					xUiObject = new xUiObject(this, applicationModel);
		modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);
		tripStartDateEditor = new tripStartDateEditor(this, applicationModel);
		tripEndDateEditor = new tripEndDateEditor(this, applicationModel);
		tripStartTimeEditor = new tripStartTimeEditor(this, applicationModel);
		tripEndTimeEditor = new tripEndTimeEditor(this, applicationModel);
		creditEditor = new creditEditor(this, applicationModel);
		runTransactionReportButton = new runTransactionReportButton(this, applicationModel);
		pDFIconButton = new pDFIconButton(this, applicationModel);
		cMBoardripRghtClkMenu = new cMBoardripRghtClkMenu(this, applicationModel);

			setDisplayName("CMBoard");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public xUiObject xUiObject() { return xUiObject; }
		public modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox() { return modifyScheduleArrowCheckBox; }
		public tripStartDateEditor tripStartDateEditor() { return tripStartDateEditor; }
		public tripEndDateEditor tripEndDateEditor() { return tripEndDateEditor; }
		public tripStartTimeEditor tripStartTimeEditor() { return tripStartTimeEditor; }
		public tripEndTimeEditor tripEndTimeEditor() { return tripEndTimeEditor; }
		public creditEditor creditEditor() { return creditEditor; }
		public runTransactionReportButton runTransactionReportButton() { return runTransactionReportButton; }
		public pDFIconButton pDFIconButton() { return pDFIconButton; }
		public cMBoardripRghtClkMenu cMBoardripRghtClkMenu() { return cMBoardripRghtClkMenu; }
		
			public class xUiObject extends UiObjectNodeBase
	{

		
								public xUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("X");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass(new RegExpProperty("com.swacorp.css.screens.crewboard.CrewBoardPiece")).index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class modifyScheduleArrowCheckBox extends CheckBoxNodeBase
	{

		
								public modifyScheduleArrowCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModifyScheduleArrow");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("whiteArrow_up").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tripStartDateEditor extends EditorNodeBase
	{

		
								public tripStartDateEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TripStartDate");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Start Date").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tripEndDateEditor extends EditorNodeBase
	{

		
								public tripEndDateEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TripEndDate");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("End Date").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tripStartTimeEditor extends EditorNodeBase
	{

		
								public tripStartTimeEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TripStartTime");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Time").nativeClass("com.swacorp.css.screens.common.CSSTimeField").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class tripEndTimeEditor extends EditorNodeBase
	{

		
								public tripEndTimeEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TripEndTime");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Time").nativeClass("com.swacorp.css.screens.common.CSSTimeField").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class creditEditor extends EditorNodeBase
	{

		
								public creditEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Credit");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Credit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class runTransactionReportButton extends ButtonNodeBase
	{

		
								public runTransactionReportButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run_Transaction_Report");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Run_Transaction_Report").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pDFIconButton extends ButtonNodeBase
	{

		
								public pDFIconButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PDF_Icon");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("PDF_Icon").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cMBoardripRghtClkMenu extends MenuNodeBase
	{

		
								public cMBoardripRghtClkMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CMBoardripRghtClkMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Transactions").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class crewMemberSchedule90870CAHOONCLAYINTLInternalFrame extends InternalFrameNodeBase
	{

		
			private modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox;
						public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);
			
			setDisplayName("Crew Member Schedule - 90870 CAHOON CLAY **INTL**");
		}
				public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);

			setDisplayName("Crew Member Schedule - 90870 CAHOON CLAY **INTL**");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().title("Crew Member Schedule - 90870 CAHOON CLAY **INTL**").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox() { return modifyScheduleArrowCheckBox; }
		
			public class modifyScheduleArrowCheckBox extends CheckBoxNodeBase
	{

		
								public modifyScheduleArrowCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModifyScheduleArrow");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("whiteArrow_up").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1 extends InternalFrameNodeBase
	{

		
			private modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox;
						public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);
			
			setDisplayName("Crew Member Schedule - 90870 CAHOON CLAY **INTL**1");
		}
				public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);

			setDisplayName("Crew Member Schedule - 90870 CAHOON CLAY **INTL**1");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().title("Crew Member Schedule - 90870 CAHOON CLAY **INTL**").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox() { return modifyScheduleArrowCheckBox; }
		
			public class modifyScheduleArrowCheckBox extends CheckBoxNodeBase
	{

		
								public modifyScheduleArrowCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModifyScheduleArrow");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("whiteArrow_up").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class frameTrimDetails extends InternalFrameNodeBase
	{

		
			private firstTable firstTable;
	private secondTable secondTable;
	private thirdTable thirdTable;
	private crewMemberSchedule90870CAHOONCLAYINTLInternalFrame crewMemberSchedule90870CAHOONCLAYINTLInternalFrame;
	private crewMembersTable crewMembersTable;
						public frameTrimDetails(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					firstTable = new firstTable(this, applicationModel);
		secondTable = new secondTable(this, applicationModel);
		thirdTable = new thirdTable(this, applicationModel);
		crewMemberSchedule90870CAHOONCLAYINTLInternalFrame = new crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(this, applicationModel);
		crewMembersTable = new crewMembersTable(this, applicationModel);
			
			setDisplayName("Trip Details");
		}
				public frameTrimDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					firstTable = new firstTable(this, applicationModel);
		secondTable = new secondTable(this, applicationModel);
		thirdTable = new thirdTable(this, applicationModel);
		crewMemberSchedule90870CAHOONCLAYINTLInternalFrame = new crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(this, applicationModel);
		crewMembersTable = new crewMembersTable(this, applicationModel);

			setDisplayName("Trip Details");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().path("WnCapturedMDIWindow;WnDesktopMDI$1;WnDesktopMDI;WnDesktopArea;JPanel;JLayeredPane;JRootPane;WnApplicationContainer;").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public firstTable firstTable() { return firstTable; }
		public secondTable secondTable() { return secondTable; }
		public thirdTable thirdTable() { return thirdTable; }
		public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame crewMemberSchedule90870CAHOONCLAYINTLInternalFrame() { return crewMemberSchedule90870CAHOONCLAYINTLInternalFrame; }
		public crewMembersTable crewMembersTable() { return crewMembersTable; }
		
			public class firstTable extends TableNodeBase
	{

		
								public firstTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("firstTable");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().nativeClass("com.swacorp.css.screens.trip.TripDetailsTable").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class secondTable extends TableNodeBase
	{

		
								public secondTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SecondTable");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().nativeClass("com.swacorp.css.screens.trip.TripDetailsTable").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class thirdTable extends TableNodeBase
	{

		
								public thirdTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ThirdTable");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().nativeClass("com.swacorp.css.screens.trip.TripDetailsTable").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class crewMemberSchedule90870CAHOONCLAYINTLInternalFrame extends InternalFrameNodeBase
	{

		
			private modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox;
						public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);
			
			setDisplayName("Crew Member Schedule - 90870 CAHOON CLAY **INTL**");
		}
				public crewMemberSchedule90870CAHOONCLAYINTLInternalFrame(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					modifyScheduleArrowCheckBox = new modifyScheduleArrowCheckBox(this, applicationModel);

			setDisplayName("Crew Member Schedule - 90870 CAHOON CLAY **INTL**");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().title("Crew Member Schedule - 90870 CAHOON CLAY **INTL**").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public modifyScheduleArrowCheckBox modifyScheduleArrowCheckBox() { return modifyScheduleArrowCheckBox; }
		
			public class modifyScheduleArrowCheckBox extends CheckBoxNodeBase
	{

		
								public modifyScheduleArrowCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModifyScheduleArrow");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("whiteArrow_up").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class crewMembersTable extends TableNodeBase
	{

		
								public crewMembersTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CrewMembers");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().nativeClass("javax.swing.JTable").tagName("Crew Members").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class transactionReportInternalFrame extends InternalFrameNodeBase
	{

		
			private pDFIconButton pDFIconButton;
	private report report;
						public transactionReportInternalFrame(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					pDFIconButton = new pDFIconButton(this, applicationModel);
		report = new report(this, applicationModel);
			
			setDisplayName("Transaction Report");
		}
				public transactionReportInternalFrame(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					pDFIconButton = new pDFIconButton(this, applicationModel);
		report = new report(this, applicationModel);

			setDisplayName("Transaction Report");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().title("Transaction Report").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public pDFIconButton pDFIconButton() { return pDFIconButton; }
		public report report() { return report; }
		
			public class pDFIconButton extends ButtonNodeBase
	{

		
								public pDFIconButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PDF_Icon");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("PDF_Icon").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class report extends LabelNodeBase
	{

		
								public report(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("report");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class reportsMenu extends MenuNodeBase
	{

		
			private transactionReportMenu transactionReportMenu;
						public reportsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					transactionReportMenu = new transactionReportMenu(this, applicationModel);

			setDisplayName("Reports");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Reports").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public transactionReportMenu transactionReportMenu() { return transactionReportMenu; }
		
			public class transactionReportMenu extends MenuNodeBase
	{

		
								public transactionReportMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Transaction Report");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Transaction Report...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class transactionReportDialog extends DialogNodeBase
	{

		
			private crewMemberCheckBox crewMemberCheckBox;
	private reasonCheckBox reasonCheckBox;
	private functionsCheckBox functionsCheckBox;
	private FunctionDropdownList FunctionDropdownList;
	private ReasonTable ReasonTable;
	private SelectFunctionButton SelectFunctionButton;
	private beginningDateEditor beginningDateEditor;
	private endingDateEditor endingDateEditor;
	private runReportButton runReportButton;
	private cancel cancel;
	private lastCheckBox lastCheckBox;
						public transactionReportDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					crewMemberCheckBox = new crewMemberCheckBox(this, applicationModel);
		reasonCheckBox = new reasonCheckBox(this, applicationModel);
		functionsCheckBox = new functionsCheckBox(this, applicationModel);
		FunctionDropdownList = new FunctionDropdownList(this, applicationModel);
		ReasonTable = new ReasonTable(this, applicationModel);
		SelectFunctionButton = new SelectFunctionButton(this, applicationModel);
		beginningDateEditor = new beginningDateEditor(this, applicationModel);
		endingDateEditor = new endingDateEditor(this, applicationModel);
		runReportButton = new runReportButton(this, applicationModel);
		cancel = new cancel(this, applicationModel);
		lastCheckBox = new lastCheckBox(this, applicationModel);
			
			setDisplayName("Transaction Report Dialog");
		}
				public transactionReportDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					crewMemberCheckBox = new crewMemberCheckBox(this, applicationModel);
		reasonCheckBox = new reasonCheckBox(this, applicationModel);
		functionsCheckBox = new functionsCheckBox(this, applicationModel);
		FunctionDropdownList = new FunctionDropdownList(this, applicationModel);
		ReasonTable = new ReasonTable(this, applicationModel);
		SelectFunctionButton = new SelectFunctionButton(this, applicationModel);
		beginningDateEditor = new beginningDateEditor(this, applicationModel);
		endingDateEditor = new endingDateEditor(this, applicationModel);
		runReportButton = new runReportButton(this, applicationModel);
		cancel = new cancel(this, applicationModel);
		lastCheckBox = new lastCheckBox(this, applicationModel);

			setDisplayName("Transaction Report Dialog");
		}

		@Override
		protected com.hp.lft.sdk.java.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.DialogDescription.Builder().title("Transaction Report Dialog").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public crewMemberCheckBox crewMemberCheckBox() { return crewMemberCheckBox; }
		public reasonCheckBox reasonCheckBox() { return reasonCheckBox; }
		public functionsCheckBox functionsCheckBox() { return functionsCheckBox; }
		public FunctionDropdownList FunctionDropdownList() { return FunctionDropdownList; }
		public ReasonTable ReasonTable() { return ReasonTable; }
		public SelectFunctionButton SelectFunctionButton() { return SelectFunctionButton; }
		public beginningDateEditor beginningDateEditor() { return beginningDateEditor; }
		public endingDateEditor endingDateEditor() { return endingDateEditor; }
		public runReportButton runReportButton() { return runReportButton; }
		public cancel cancel() { return cancel; }
		public lastCheckBox lastCheckBox() { return lastCheckBox; }
		
			public class crewMemberCheckBox extends CheckBoxNodeBase
	{

		
								public crewMemberCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Crew Member:");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Crew Member:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class reasonCheckBox extends CheckBoxNodeBase
	{

		
								public reasonCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Reason:");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Reason:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class functionsCheckBox extends CheckBoxNodeBase
	{

		
								public functionsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Functions:");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Functions:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FunctionDropdownList extends EditorNodeBase
	{

		
								public FunctionDropdownList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FunctionDropdownList");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("(CSS Login ID)").nativeClass("javax.swing.plaf.basic.BasicComboBoxEditor$BorderlessTextField").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReasonTable extends TableNodeBase
	{

		
								public ReasonTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReasonTable");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectFunctionButton extends ButtonNodeBase
	{

		
								public SelectFunctionButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectFunctionButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Ending Date").label("").nativeClass("com.incors.plaf.alloy.dw").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class beginningDateEditor extends EditorNodeBase
	{

		
								public beginningDateEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BeginningDate");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Beginning Date").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class endingDateEditor extends EditorNodeBase
	{

		
								public endingDateEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EndingDate");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Ending Date").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class runReportButton extends ButtonNodeBase
	{

		
								public runReportButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("btnRunReport");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Run Report").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancel extends ButtonNodeBase
	{

		
								public cancel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("btnCancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class lastCheckBox extends CheckBoxNodeBase
	{

		
								public lastCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Last");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Last:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class openTimeMenu extends MenuNodeBase
	{

		
			private getOpenTripsButton getOpenTripsButton;
	private viewOpenTimeMenu viewOpenTimeMenu;
						public openTimeMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					getOpenTripsButton = new getOpenTripsButton(this, applicationModel);
		viewOpenTimeMenu = new viewOpenTimeMenu(this, applicationModel);

			setDisplayName("OpenTime");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Open Time").nativeClass("javax.swing.JMenu").path("JMenu;JMenuBar;JLayeredPane;JRootPane;WnApplicationContainer;").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public getOpenTripsButton getOpenTripsButton() { return getOpenTripsButton; }
		public viewOpenTimeMenu viewOpenTimeMenu() { return viewOpenTimeMenu; }
		
			public class getOpenTripsButton extends ButtonNodeBase
	{

		
								public getOpenTripsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("getOpenTripsButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Get Open Trips").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class viewOpenTimeMenu extends MenuNodeBase
	{

		
								public viewOpenTimeMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ViewOpenTime...");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("View Open Time...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class openTimeInternalFrame extends InternalFrameNodeBase
	{

		
			private whiteArrowExpandedState whiteArrowExpandedState;
	private bWICheckBox bWICheckBox;
	private fromEditor fromEditor;
	private toEditor toEditor;
	private BaseCheckbox BaseCheckbox;
	private captainCheckBox captainCheckBox;
	private getOpenTripsButton getOpenTripsButton;
						public openTimeInternalFrame(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					whiteArrowExpandedState = new whiteArrowExpandedState(this, applicationModel);
		bWICheckBox = new bWICheckBox(this, applicationModel);
		fromEditor = new fromEditor(this, applicationModel);
		toEditor = new toEditor(this, applicationModel);
		BaseCheckbox = new BaseCheckbox(this, applicationModel);
		captainCheckBox = new captainCheckBox(this, applicationModel);
		getOpenTripsButton = new getOpenTripsButton(this, applicationModel);
			
			setDisplayName("OpenTimeInternalFrame");
		}
				public openTimeInternalFrame(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					whiteArrowExpandedState = new whiteArrowExpandedState(this, applicationModel);
		bWICheckBox = new bWICheckBox(this, applicationModel);
		fromEditor = new fromEditor(this, applicationModel);
		toEditor = new toEditor(this, applicationModel);
		BaseCheckbox = new BaseCheckbox(this, applicationModel);
		captainCheckBox = new captainCheckBox(this, applicationModel);
		getOpenTripsButton = new getOpenTripsButton(this, applicationModel);

			setDisplayName("OpenTimeInternalFrame");
		}

		@Override
		protected com.hp.lft.sdk.java.InternalFrameDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.InternalFrameDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.InternalFrameDescription.Builder().title(new RegExpProperty("Open Time.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public whiteArrowExpandedState whiteArrowExpandedState() { return whiteArrowExpandedState; }
		public bWICheckBox bWICheckBox() { return bWICheckBox; }
		public fromEditor fromEditor() { return fromEditor; }
		public toEditor toEditor() { return toEditor; }
		public BaseCheckbox BaseCheckbox() { return BaseCheckbox; }
		public captainCheckBox captainCheckBox() { return captainCheckBox; }
		public getOpenTripsButton getOpenTripsButton() { return getOpenTripsButton; }
		
			public class whiteArrowExpandedState extends CheckBoxNodeBase
	{

		
								public whiteArrowExpandedState(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("whiteArrowExpandedState");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("whiteArrow_up").nativeClass("com.swacorp.css.screens.common.UpDownButton").state(com.hp.lft.sdk.CheckedState.UNCHECKED).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class bWICheckBox extends CheckBoxNodeBase
	{

		
								public bWICheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BWI");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("BWI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class fromEditor extends EditorNodeBase
	{

		
								public fromEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("From");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("From").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class toEditor extends EditorNodeBase
	{

		
								public toEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("To");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("To").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BaseCheckbox extends CheckBoxNodeBase
	{

		
								public BaseCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BaseCheckbox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("ATL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class captainCheckBox extends CheckBoxNodeBase
	{

		
								public captainCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("captainCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Captain").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class getOpenTripsButton extends ButtonNodeBase
	{

		
								public getOpenTripsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("getOpenTripsButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Get Open Trips").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class crewBoardPieceUiObject extends UiObjectNodeBase
	{

		
								public crewBoardPieceUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CrewBoardPiece");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("com.swacorp.css.screens.crewboard.CrewBoardPiece").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cmbEmployeeListDropdown extends ListNodeBase
	{

		
								public cmbEmployeeListDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BasicComboPopup$1");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}


			
	public abstract class DialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Dialog, com.hp.lft.sdk.java.DialogDescription> implements com.hp.lft.sdk.java.Dialog
	{
		public DialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public DialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class EditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Editor, com.hp.lft.sdk.java.EditorDescription> implements com.hp.lft.sdk.java.Editor
	{		
		public EditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void clickLink(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().clickLink(arg0);
		}

		@Override 
		public void delete(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().delete(arg0, arg1, arg2, arg3);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void insert(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().insert(arg0, arg1, arg2);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void replace(java.lang.String arg0, int arg1, int arg2, int arg3, int arg4) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().replace(arg0, arg1, arg2, arg3, arg4);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Window, com.hp.lft.sdk.java.WindowDescription> implements com.hp.lft.sdk.java.Window
	{
		public WindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ToolBarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.ToolBar, com.hp.lft.sdk.java.ToolBarDescription> implements com.hp.lft.sdk.java.ToolBar
	{		
		public ToolBarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ToolBarButton getButton(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButton(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtons();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getSelectedButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedButtons();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class CheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.CheckBox, com.hp.lft.sdk.java.CheckBoxDescription> implements com.hp.lft.sdk.java.CheckBox
	{		
		public CheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setState(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setState(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class UiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.UiObject, com.hp.lft.sdk.java.UiObjectDescription> implements com.hp.lft.sdk.java.UiObject
	{		
		public UiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class MenuNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Menu, com.hp.lft.sdk.java.MenuDescription> implements com.hp.lft.sdk.java.Menu
	{		
		public MenuNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.java.Menu getSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenu(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.Menu> getSubMenus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenus();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select();
		}

		@Override 
		public void selectSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectSubMenu(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class InternalFrameNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.InternalFrame, com.hp.lft.sdk.java.InternalFrameDescription> implements com.hp.lft.sdk.java.InternalFrame
	{
		public InternalFrameNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public InternalFrameNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class TableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Table, com.hp.lft.sdk.java.TableDescription> implements com.hp.lft.sdk.java.Table
	{		
		public TableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateColumn(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateColumn(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateRow(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void deselectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCellsRange(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectCellsRange(int arg0, java.lang.String arg1, int arg2, java.lang.String arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void selectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class LabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Label, com.hp.lft.sdk.java.LabelDescription> implements com.hp.lft.sdk.java.Label
	{		
		public LabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ListNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.List, com.hp.lft.sdk.java.ListDescription> implements com.hp.lft.sdk.java.List
	{		
		public ListNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(com.hp.lft.sdk.java.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
}
