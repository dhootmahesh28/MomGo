
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package com.swacorp.crew.sharedrepository.tsr;

import com.hp.lft.sdk.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.03
public class MainObjectRepoTrim extends AppModelBase {		private loginToSouthwestWindow loginToSouthwestWindow;
	private useActiveDirectoryCheckBox useActiveDirectoryCheckBox;
	private hPEMyFlightSampleApplicationWindow hPEMyFlightSampleApplicationWindow;
	private loginDialog loginDialog;

	public MainObjectRepoTrim() throws GeneralLeanFtException
	{
		setName("ObjectRepo_Trim");
			loginToSouthwestWindow = new loginToSouthwestWindow(this);
	hPEMyFlightSampleApplicationWindow = new hPEMyFlightSampleApplicationWindow(this);
	loginDialog = new loginDialog(this);
		rebuildDescriptions();
	}
	
	public MainObjectRepoTrim(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("ObjectRepo_Trim");
				loginToSouthwestWindow = new loginToSouthwestWindow(contextTestObject, this);
		useActiveDirectoryCheckBox = new useActiveDirectoryCheckBox(contextTestObject, this);
		hPEMyFlightSampleApplicationWindow = new hPEMyFlightSampleApplicationWindow(contextTestObject, this);
		loginDialog = new loginDialog(contextTestObject, this);
		rebuildDescriptions();
	}	

			public loginToSouthwestWindow loginToSouthwestWindow() { return loginToSouthwestWindow; }
		public useActiveDirectoryCheckBox useActiveDirectoryCheckBox() { return useActiveDirectoryCheckBox; }
		public hPEMyFlightSampleApplicationWindow hPEMyFlightSampleApplicationWindow() { return hPEMyFlightSampleApplicationWindow; }
		public loginDialog loginDialog() { return loginDialog; }

		public class loginToSouthwestWindow extends WinFormsWindowNodeBase
	{

		
			private txtUserIDEditField txtUserIDEditField;
	private txtPasswordEditField txtPasswordEditField;
	private btnLoginButton btnLoginButton;
						public loginToSouthwestWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					txtUserIDEditField = new txtUserIDEditField(this, applicationModel);
		txtPasswordEditField = new txtPasswordEditField(this, applicationModel);
		btnLoginButton = new btnLoginButton(this, applicationModel);
			
			setDisplayName("Login to Southwest");
		}
				public loginToSouthwestWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					txtUserIDEditField = new txtUserIDEditField(this, applicationModel);
		txtPasswordEditField = new txtPasswordEditField(this, applicationModel);
		btnLoginButton = new btnLoginButton(this, applicationModel);

			setDisplayName("Login to Southwest");
		}

		@Override
		protected com.hp.lft.sdk.winforms.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.WindowDescription.Builder().childWindow(false).ownedWindow(false).objectName("frmLogin").windowTitleRegExp("Login to Southwest").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public txtUserIDEditField txtUserIDEditField() { return txtUserIDEditField; }
		public txtPasswordEditField txtPasswordEditField() { return txtPasswordEditField; }
		public btnLoginButton btnLoginButton() { return btnLoginButton; }
		
			public class txtUserIDEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtUserIDEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtUserID");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtUserID").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class txtPasswordEditField extends WinFormsEditFieldNodeBase
	{

		
								public txtPasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("txtPassword");
		}

		@Override
		protected com.hp.lft.sdk.winforms.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.EditFieldDescription.Builder().objectName("txtPassword").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class btnLoginButton extends WinFormsButtonNodeBase
	{

		public btnLoginButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
			setDisplayName("Login");
		}

		@Override
		protected com.hp.lft.sdk.winforms.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.ButtonDescription.Builder().objectName("btnOK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}
		}
	}

	public class useActiveDirectoryCheckBox extends WinFormsCheckBoxNodeBase
	{

		
								public useActiveDirectoryCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use Active Directory");
		}

		@Override
		protected com.hp.lft.sdk.winforms.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.winforms.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.winforms.CheckBoxDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class hPEMyFlightSampleApplicationWindow extends WpfWindowNodeBase
	{

		private agentNameEditField agentNameEditField;
	private passwordEditField passwordEditField;
	private oKButton oKButton;
						public hPEMyFlightSampleApplicationWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					agentNameEditField = new agentNameEditField(this, applicationModel);
		passwordEditField = new passwordEditField(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("HPE MyFlight Sample Application");
		}
				public hPEMyFlightSampleApplicationWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					agentNameEditField = new agentNameEditField(this, applicationModel);
		passwordEditField = new passwordEditField(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("HPE MyFlight Sample Application");
		}

		@Override
		protected com.hp.lft.sdk.wpf.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.WindowDescription.Builder().fullType("window").objectName("HPE MyFlight Sample Application").windowTitleRegExp("HPE MyFlight Sample Application").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public agentNameEditField agentNameEditField() { return agentNameEditField; }
		public passwordEditField passwordEditField() { return passwordEditField; }
		public oKButton oKButton() { return oKButton; }
		
			public class agentNameEditField extends WpfEditFieldNodeBase
	{

		
								public agentNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("agentName");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("agentName").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class passwordEditField extends WpfEditFieldNodeBase
	{

		
								public passwordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("password");
		}

		@Override
		protected com.hp.lft.sdk.wpf.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.EditFieldDescription.Builder().objectName("password").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends WpfButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.wpf.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.wpf.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.wpf.ButtonDescription.Builder().objectName("okButton").text("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class loginDialog extends JavaDialogNodeBase
	{

		
			private userNameEditor userNameEditor;
	private passwordEditor passwordEditor;
	private loginButton loginButton;
						public loginDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					userNameEditor = new userNameEditor(this, applicationModel);
		passwordEditor = new passwordEditor(this, applicationModel);
		loginButton = new loginButton(this, applicationModel);
			
			setDisplayName("Login");
		}
				public loginDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					userNameEditor = new userNameEditor(this, applicationModel);
		passwordEditor = new passwordEditor(this, applicationModel);
		loginButton = new loginButton(this, applicationModel);

			setDisplayName("Login");
		}

		@Override
		protected com.hp.lft.sdk.java.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.DialogDescription.Builder().title("Login").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public userNameEditor userNameEditor() { return userNameEditor; }
		public passwordEditor passwordEditor() { return passwordEditor; }
		public loginButton loginButton() { return loginButton; }
		
			public class userNameEditor extends JavaEditorNodeBase
	{

		
								public userNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("User Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class passwordEditor extends JavaEditorNodeBase
	{

		
								public passwordEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Password:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Password:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class loginButton extends JavaButtonNodeBase
	{

		
								public loginButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Login");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Login").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class JavaDialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Dialog, com.hp.lft.sdk.java.DialogDescription> implements com.hp.lft.sdk.java.Dialog
	{
		public JavaDialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public JavaDialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws GeneralLeanFtException
		{
			getConcrete().activate();
		}

		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void close() throws GeneralLeanFtException
		{
			getConcrete().close();
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override
		public String getBackgroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getBackgroundColor();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getForegroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getForegroundColor();
		}

		@Override
		public String getLabel() throws GeneralLeanFtException
		{
			return getConcrete().getLabel();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public String getPath() throws GeneralLeanFtException
		{
			return getConcrete().getPath();
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getTagName() throws GeneralLeanFtException
		{
			return getConcrete().getTagName();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getTitle() throws GeneralLeanFtException
		{
			return getConcrete().getTitle();
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public WindowState getWindowState() throws GeneralLeanFtException
		{
			return getConcrete().getWindowState();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isJavaWindow() throws GeneralLeanFtException
		{
			return getConcrete().isJavaWindow();
		}

		@Override
		public boolean isMaximizable() throws GeneralLeanFtException
		{
			return getConcrete().isMaximizable();
		}

		@Override
		public boolean isMinimizable() throws GeneralLeanFtException
		{
			return getConcrete().isMinimizable();
		}

		@Override
		public boolean isResizable() throws GeneralLeanFtException
		{
			return getConcrete().isResizable();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void maximize() throws GeneralLeanFtException
		{
			getConcrete().maximize();
		}

		@Override
		public void minimize() throws GeneralLeanFtException
		{
			getConcrete().minimize();
		}

		@Override
		public void move(java.awt.Point arg0) throws GeneralLeanFtException
		{
			getConcrete().move(arg0);
		}

		@Override
		public void move(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().move(arg0, arg1);
		}

		@Override
		public void resize(java.awt.Dimension arg0) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0);
		}

		@Override
		public void resize(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override
		public void restore() throws GeneralLeanFtException
		{
			getConcrete().restore();
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class JavaEditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Editor, com.hp.lft.sdk.java.EditorDescription> implements com.hp.lft.sdk.java.Editor
	{
		public JavaEditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void activate() throws GeneralLeanFtException
		{
			getConcrete().activate();
		}

		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void clickLink(String arg0) throws GeneralLeanFtException
		{
			getConcrete().clickLink(arg0);
		}

		@Override
		public void delete(int arg0, int arg1, int arg2, int arg3) throws GeneralLeanFtException
		{
			getConcrete().delete(arg0, arg1, arg2, arg3);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override
		public String getBackgroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getBackgroundColor();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getForegroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getForegroundColor();
		}

		@Override
		public String getLabel() throws GeneralLeanFtException
		{
			return getConcrete().getLabel();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public String getPath() throws GeneralLeanFtException
		{
			return getConcrete().getPath();
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getTagName() throws GeneralLeanFtException
		{
			return getConcrete().getTagName();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public void insert(String arg0, int arg1, int arg2) throws GeneralLeanFtException
		{
			getConcrete().insert(arg0, arg1, arg2);
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isReadOnly() throws GeneralLeanFtException
		{
			return getConcrete().isReadOnly();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void replace(String arg0, int arg1, int arg2, int arg3, int arg4) throws GeneralLeanFtException
		{
			getConcrete().replace(arg0, arg1, arg2, arg3, arg4);
		}

		@Override
		public void select(int arg0, int arg1, int arg2, int arg3) throws GeneralLeanFtException
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setCursorPosition(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public void setFocus() throws GeneralLeanFtException
		{
			getConcrete().setFocus();
		}

		@Override
		public void setSecure(String arg0) throws GeneralLeanFtException
		{
			getConcrete().setSecure(arg0);
		}

		@Override
		public void setText(String arg0) throws GeneralLeanFtException
		{
			getConcrete().setText(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class JavaButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{
		public JavaButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override
		public String getBackgroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getBackgroundColor();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getForegroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getForegroundColor();
		}

		@Override
		public String getLabel() throws GeneralLeanFtException
		{
			return getConcrete().getLabel();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public String getPath() throws GeneralLeanFtException
		{
			return getConcrete().getPath();
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getTagName() throws GeneralLeanFtException
		{
			return getConcrete().getTagName();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WinFormsWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.winforms.Window, com.hp.lft.sdk.winforms.WindowDescription> implements com.hp.lft.sdk.winforms.Window
	{
		public WinFormsWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WinFormsWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void activate() throws GeneralLeanFtException
		{
			getConcrete().activate();
		}

		@Override
		public void activate(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().activate(arg0);
		}

		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void close() throws GeneralLeanFtException
		{
			getConcrete().close();
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(String arg0, Object... arg1) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public String getWindowClassRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override
		public int getWindowId() throws GeneralLeanFtException
		{
			return getConcrete().getWindowId();
		}

		@Override
		public WindowState getWindowState() throws GeneralLeanFtException
		{
			return getConcrete().getWindowState();
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public boolean hasBorder() throws GeneralLeanFtException
		{
			return getConcrete().hasBorder();
		}

		@Override
		public boolean hasCaption() throws GeneralLeanFtException
		{
			return getConcrete().hasCaption();
		}

		@Override
		public boolean hasSizebox() throws GeneralLeanFtException
		{
			return getConcrete().hasSizebox();
		}

		@Override
		public boolean hasSystemMenu() throws GeneralLeanFtException
		{
			return getConcrete().hasSystemMenu();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isActive() throws GeneralLeanFtException
		{
			return getConcrete().isActive();
		}

		@Override
		public boolean isChildWindow() throws GeneralLeanFtException
		{
			return getConcrete().isChildWindow();
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isMaximizable() throws GeneralLeanFtException
		{
			return getConcrete().isMaximizable();
		}

		@Override
		public boolean isMdiChildWindow() throws GeneralLeanFtException
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override
		public boolean isMinimizable() throws GeneralLeanFtException
		{
			return getConcrete().isMinimizable();
		}

		@Override
		public boolean isOwnedWindow() throws GeneralLeanFtException
		{
			return getConcrete().isOwnedWindow();
		}

		@Override
		public boolean isPopupWindow() throws GeneralLeanFtException
		{
			return getConcrete().isPopupWindow();
		}

		@Override
		public boolean isToolWindow() throws GeneralLeanFtException
		{
			return getConcrete().isToolWindow();
		}

		@Override
		public boolean isTopmost() throws GeneralLeanFtException
		{
			return getConcrete().isTopmost();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void maximize() throws GeneralLeanFtException
		{
			getConcrete().maximize();
		}

		@Override
		public void minimize() throws GeneralLeanFtException
		{
			getConcrete().minimize();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void move(java.awt.Point arg0) throws GeneralLeanFtException
		{
			getConcrete().move(arg0);
		}

		@Override
		public void move(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().move(arg0, arg1);
		}

		@Override
		public void resize(java.awt.Dimension arg0) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0);
		}

		@Override
		public void resize(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override
		public void restore() throws GeneralLeanFtException
		{
			getConcrete().restore();
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WinFormsEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.EditField, com.hp.lft.sdk.winforms.EditFieldDescription> implements com.hp.lft.sdk.winforms.EditField
	{
		public WinFormsEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(String arg0, Object... arg1) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getErrorText() throws GeneralLeanFtException
		{
			return getConcrete().getErrorText();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public String getWindowClassRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override
		public int getWindowId() throws GeneralLeanFtException
		{
			return getConcrete().getWindowId();
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isChildWindow() throws GeneralLeanFtException
		{
			return getConcrete().isChildWindow();
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isOwnedWindow() throws GeneralLeanFtException
		{
			return getConcrete().isOwnedWindow();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void select(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().select(arg0, arg1);
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public void setSecure(String arg0) throws GeneralLeanFtException
		{
			getConcrete().setSecure(arg0);
		}

		@Override
		public void setText(String arg0) throws GeneralLeanFtException
		{
			getConcrete().setText(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WinFormsButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.Button, com.hp.lft.sdk.winforms.ButtonDescription> implements com.hp.lft.sdk.winforms.Button
	{
		public WinFormsButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(String arg0, Object... arg1) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getErrorText() throws GeneralLeanFtException
		{
			return getConcrete().getErrorText();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public String getWindowClassRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override
		public int getWindowId() throws GeneralLeanFtException
		{
			return getConcrete().getWindowId();
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isChildWindow() throws GeneralLeanFtException
		{
			return getConcrete().isChildWindow();
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isOwnedWindow() throws GeneralLeanFtException
		{
			return getConcrete().isOwnedWindow();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WinFormsCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.winforms.CheckBox, com.hp.lft.sdk.winforms.CheckBoxDescription> implements com.hp.lft.sdk.winforms.CheckBox
	{
		public WinFormsCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public void fireEvent(String arg0, Object... arg1) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getErrorText() throws GeneralLeanFtException
		{
			return getConcrete().getErrorText();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public CheckedState getState() throws GeneralLeanFtException
		{
			return getConcrete().getState();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public String getWindowClassRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override
		public int getWindowId() throws GeneralLeanFtException
		{
			return getConcrete().getWindowId();
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isChecked() throws GeneralLeanFtException
		{
			return getConcrete().isChecked();
		}

		@Override
		public boolean isChildWindow() throws GeneralLeanFtException
		{
			return getConcrete().isChildWindow();
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isOwnedWindow() throws GeneralLeanFtException
		{
			return getConcrete().isOwnedWindow();
		}

		@Override
		public boolean isThreeState() throws GeneralLeanFtException
		{
			return getConcrete().isThreeState();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public void setState(CheckedState arg0) throws GeneralLeanFtException
		{
			getConcrete().setState(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WpfWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.wpf.Window, com.hp.lft.sdk.wpf.WindowDescription> implements com.hp.lft.sdk.wpf.Window
	{
		public WpfWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WpfWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public void activate() throws GeneralLeanFtException
		{
			getConcrete().activate();
		}

		@Override
		public void activate(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().activate(arg0);
		}

		@Override
		public boolean canFocus() throws GeneralLeanFtException
		{
			return getConcrete().canFocus();
		}

		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void close() throws GeneralLeanFtException
		{
			getConcrete().close();
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public String getParentText() throws GeneralLeanFtException
		{
			return getConcrete().getParentText();
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public WindowState getWindowState() throws GeneralLeanFtException
		{
			return getConcrete().getWindowState();
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isModal() throws GeneralLeanFtException
		{
			return getConcrete().isModal();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void makeVisible() throws GeneralLeanFtException
		{
			getConcrete().makeVisible();
		}

		@Override
		public void maximize() throws GeneralLeanFtException
		{
			getConcrete().maximize();
		}

		@Override
		public void minimize() throws GeneralLeanFtException
		{
			getConcrete().minimize();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void move(java.awt.Point arg0) throws GeneralLeanFtException
		{
			getConcrete().move(arg0);
		}

		@Override
		public void move(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().move(arg0, arg1);
		}

		@Override
		public void resize(java.awt.Dimension arg0) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0);
		}

		@Override
		public void resize(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override
		public void restore() throws GeneralLeanFtException
		{
			getConcrete().restore();
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public void showContextMenu() throws GeneralLeanFtException
		{
			getConcrete().showContextMenu();
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WpfEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.EditField, com.hp.lft.sdk.wpf.EditFieldDescription> implements com.hp.lft.sdk.wpf.EditField
	{
		public WpfEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public boolean canFocus() throws GeneralLeanFtException
		{
			return getConcrete().canFocus();
		}

		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getName() throws GeneralLeanFtException
		{
			return getConcrete().getName();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public String getParentText() throws GeneralLeanFtException
		{
			return getConcrete().getParentText();
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isReadOnly() throws GeneralLeanFtException
		{
			return getConcrete().isReadOnly();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void makeVisible() throws GeneralLeanFtException
		{
			getConcrete().makeVisible();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void select(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().select(arg0, arg1);
		}

		@Override
		public void select(int arg0, int arg1, int arg2, int arg3) throws GeneralLeanFtException
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public void setSecure(String arg0) throws GeneralLeanFtException
		{
			getConcrete().setSecure(arg0);
		}

		@Override
		public void setText(String arg0) throws GeneralLeanFtException
		{
			getConcrete().setText(arg0);
		}

		@Override
		public void showContextMenu() throws GeneralLeanFtException
		{
			getConcrete().showContextMenu();
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}

	public abstract class WpfButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.wpf.Button, com.hp.lft.sdk.wpf.ButtonDescription> implements com.hp.lft.sdk.wpf.Button
	{
		public WpfButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override
		public boolean canFocus() throws GeneralLeanFtException
		{
			return getConcrete().canFocus();
		}

		@Override
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override
		public void dragAndDropOn(SupportDragAndDrop arg0, DragAndDropArgs arg1) throws GeneralLeanFtException
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override
		public String getFullNamePath() throws GeneralLeanFtException
		{
			return getConcrete().getFullNamePath();
		}

		@Override
		public String getFullType() throws GeneralLeanFtException
		{
			return getConcrete().getFullType();
		}

		@Override
		public int getHandle() throws GeneralLeanFtException
		{
			return getConcrete().getHandle();
		}

		@Override
		public String getHelpText() throws GeneralLeanFtException
		{
			return getConcrete().getHelpText();
		}

		@Override
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override
		public String getName() throws GeneralLeanFtException
		{
			return getConcrete().getName();
		}

		@Override
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override
		public String getParentText() throws GeneralLeanFtException
		{
			return getConcrete().getParentText();
		}

		@Override
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override
		public String getText() throws GeneralLeanFtException
		{
			return getConcrete().getText();
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override
		public com.hp.lft.sdk.wpf.ToggleButton getToggleButton()
		{
			return getConcrete().getToggleButton();
		}

		@Override
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override
		public String getWindowTitleRegExp() throws GeneralLeanFtException
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override
		public void makeVisible() throws GeneralLeanFtException
		{
			getConcrete().makeVisible();
		}

		@Override
		public void mouseMove(Location arg0) throws GeneralLeanFtException
		{
			getConcrete().mouseMove(arg0);
		}

		@Override
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override
		public void showContextMenu() throws GeneralLeanFtException
		{
			getConcrete().showContextMenu();
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
}
